http_interactions:
- request:
    method: get
    uri: https://peerj.com/articles/1545.html
    body:
      encoding: ''
      string: ''
    headers:
      User-Agent: libcurl/7.64.1 r-curl/4.3 crul/0.9.0
      Accept-Encoding: gzip, deflate
      Accept: application/json, text/xml, application/xml, */*
  response:
    status:
      status_code: '200'
      message: OK
      explanation: Request fulfilled, document follows
    headers:
      accept-ranges: bytes
      access-control-allow-origin: '*'
      age: '0'
      cache-control: max-age=0, must-revalidate, proxy-revalidate, public, s-maxage=600
      connection: keep-alive
      content-disposition: inline; filename="peerj-1545.html"
      content-encoding: gzip
      content-length: '40202'
      content-type: text/html; charset=utf-8
      date: Fri, 20 Mar 2020 22:46:54 GMT
      etag: '"7b5787958278a862631604ffa62bc92eca0e8460f9fa7cc9abfecd1a9aeb7061-gzip"'
      last-modified: Sat, 16 Jan 2016 20:47:40 GMT
      link:
      - <https://peerj.com/articles/1545.html>; rel="self"
      - <https://peerj.com/articles/1545.xml>; rel="alternate"; type="application/xml"
      - <https://peerj.com/articles/1545.pdf>; rel="alternate"; type="application/pdf"
      - <https://peerj.com/articles/1545.json>; rel="alternate"; type="application/json"
      - <https://peerj.com/articles/1545.rdf>; rel="alternate"; type="application/rdf+xml"
      - <https://peerj.com/articles/1545.ris>; rel="alternate"; type="application/x-research-info-systems"
      - <https://peerj.com/articles/1545.bib>; rel="alternate"; type="application/x-bibtex"
      - <https://peerj.com/articles/1545.citeproc>; rel="alternate"; type="application/vnd.citationstyles.csl+json"
      - <https://peerj.com/articles/1545.bibjson>; rel="alternate"; type="application/bibjson+json"
      - <https://peerj.com/articles/1545.unixref>; rel="alternate"; type="application/unixref+xml"
      status: HTTP/1.1 200 OK
      strict-transport-security: max-age=2592000
      vary: Accept-Encoding,X-Cache-AnonOnly
      via: 1.1 varnish
      x-content-type-options: nosniff
      x-country-code: US
      x-frame-options: SAMEORIGIN
      x-ratelimit-limit: ''
      x-ratelimit-remaining: ''
      x-ratelimit-reset: ''
      x-request-start: ''
      x-robots-tag: noindex
      x-varnish: '810938650'
    body:
      encoding: ASCII-8BIT
      file: no
      string: <!doctype html>
<html>
  <head>
    <meta charset="utf-8"/>
    <title>Unveiling the status of alien animals in the arid zone of Asia</title>
    <link rel="canonical" href="https://peerj.com/articles/1545"/>
    <meta name="citation_title" content="Unveiling the status of alien animals in the arid zone of Asia"/>
    <meta name="citation_date" content="2016-01-12"/>
    <meta name="citation_doi" content="10.7717/peerj.1545"/>
    <meta name="citation_language" content="en"/>
    <meta name="citation_pdf_url" content="https://peerj.com/articles/1545.pdf"/>
    <meta name="citation_fulltext_html_url" content="https://peerj.com/articles/1545"/>
    <meta name="citation_volume" content="4"/>
    <meta name="citation_firstpage" content="e1545"/>
    <meta name="citation_author" content="Lyubing Zhang"/>
    <meta name="citation_author_institution" content="Key Laboratory of Animal Ecology and Conservation Biology, Institute of Zoology, Chinese Academy of Sciences, Beijing, China"/>
    <meta name="citation_author_institution" content="University of Chinese Academy of Sciences, Beijing, China"/>
    <meta name="citation_author_institution" content="College of Resources and Environment Science, Xinjiang University, Urumqi, Xinjiang, China"/>
    <meta name="citation_author" content="Zhigang Jiang"/>
    <meta name="citation_author_institution" content="Key Laboratory of Animal Ecology and Conservation Biology, Institute of Zoology, Chinese Academy of Sciences, Beijing, China"/>
    <meta name="citation_author_institution" content="University of Chinese Academy of Sciences, Beijing, China"/>
    <meta name="citation_author_email" content="jiangzg@ioz.ac.cn"/>
    <meta name="citation_authors" content="Zhang, Lyubing; Jiang, Zhigang"/>
    <meta name="citation_author_institutions" content="Key Laboratory of Animal Ecology and Conservation Biology, Institute of Zoology, Chinese Academy of Sciences, Beijing, China; University of Chinese Academy of Sciences, Beijing, China; College of Resources and Environment Science, Xinjiang University, Urumqi, Xinjiang, China"/>
    <meta name="description" content="Biological invasion is one of the most threatening factors for biodiversity conservation. Lacking information on alien species in certain regions of the world hampers a balanced understanding of invasion processes and efficient data exchange among stakeholders. Current knowledge gaps are in need of urgent concern. We therefore conducted a review on alien animals in Xinjiang, an unknown region of invasion ecology. Xinjiang lies in the heartland of the Asian continent, covering an area of 1,664,900 km2. In the past 64 years, 128 alien animal species were recorded in this region, 39% of which became invasive and led to loss of native biodiversity. Most of these species were introduced through diversification of local agriculture and aquaculture. This process was aggravated by improving transportation and flourishing trade. Multiple linear regression models and correlation analysis were run for explaining influence of environmental and anthropogenic factors on status of alien animals: economically developed areas with abundant water resource, oases in particular, were prone to be hotspots of alien animal species in this arid and semi-arid region. This study also revealed that taxonomically biased and lagged research were critical problems that impeded studies on biological invasions in Xinjiang, and proposed feasible solutions."/>
    <meta name="citation_keywords" content="Alien species; Distribution patterns; Arid zone; Central Asia; Temporal trends; Oasis; Biological invasions"/>
    <meta name="citation_journal_title" content="PeerJ"/>
    <meta name="citation_journal_abbrev" content="PeerJ"/>
    <meta name="citation_publisher" content="PeerJ Inc."/>
    <meta name="citation_issn" content="2167-8359"/>
  </head>
  <body>
    <article itemscope="itemscope" itemtype="http://schema.org/ScholarlyArticle">
      <header class="article-meta front">
        <h1 class="article-title" itemprop="name headline">Unveiling the status of alien animals in the arid zone of Asia</h1>
        <div class="article-authors"><span class="contrib" itemscope="itemscope" itemtype="http://schema.org/Person" id="author-1" data-jats-contrib-type="author" itemprop="author"><a href="author-1" rel="author" itemprop="url"><span class="name" itemprop="name"><span class="given-names" itemprop="givenName">Lyubing</span> <span class="surname" itemprop="familyName">Zhang</span></span></a><sup class="contrib-xref-group"><a class="aff xref" href="#aff-1" itemprop="affiliation" itemscope="itemscope" itemtype="http://schema.org/Organization" itemref="aff-1">1</a>,<a class="aff xref" href="#aff-2" itemprop="affiliation" itemscope="itemscope" itemtype="http://schema.org/Organization" itemref="aff-2">2</a>,<a class="aff xref" href="#aff-3" itemprop="affiliation" itemscope="itemscope" itemtype="http://schema.org/Organization" itemref="aff-3">3</a></sup></span>, <span class="contrib" itemscope="itemscope" itemtype="http://schema.org/Person" id="author-2" data-jats-contrib-type="author" data-jats-corresp="yes" itemprop="author"><a href="author-2" rel="author" itemprop="url"><span class="name" itemprop="name"><span class="given-names" itemprop="givenName">Zhigang</span> <span class="surname" itemprop="familyName">Jiang</span></span></a><a class="corresp" href="mailto:jiangzg@ioz.ac.cn" target="_blank" title="email the corresponding author" data-toggle="tooltip" itemprop="email"><i class="icon-envelope">​</i></a><sup class="contrib-xref-group"><a class="aff xref" href="#aff-1" itemprop="affiliation" itemscope="itemscope" itemtype="http://schema.org/Organization" itemref="aff-1">1</a>,<a class="aff xref" href="#aff-2" itemprop="affiliation" itemscope="itemscope" itemtype="http://schema.org/Organization" itemref="aff-2">2</a></sup></span></div>
        <div id="article-information">
          <div class="article-notes">
            <div itemscope="itemscope" itemtype="http://schema.org/Organization" id="aff-1">
              <span class="article-label-container">
                <a class="article-label">1</a>
              </span>
              <span itemprop="address"><span class="institution">Key Laboratory of Animal Ecology and Conservation Biology, Institute of Zoology, Chinese Academy of Sciences</span>, <span class="addr-line">Beijing</span>, <span class="country">China</span></span>
            </div>
            <div itemscope="itemscope" itemtype="http://schema.org/Organization" id="aff-2">
              <span class="article-label-container">
                <a class="article-label">2</a>
              </span>
              <span itemprop="address"><span class="institution">University of Chinese Academy of Sciences</span>, <span class="addr-line">Beijing</span>, <span class="country">China</span></span>
            </div>
            <div itemscope="itemscope" itemtype="http://schema.org/Organization" id="aff-3">
              <span class="article-label-container">
                <a class="article-label">3</a>
              </span>
              <span itemprop="address"><span class="institution">College of Resources and Environment Science, Xinjiang University</span>, <span class="addr-line">Urumqi, Xinjiang</span>, <span class="country">China</span></span>
            </div>
          </div>
          <dl class="article-identifiers">
            <dt> DOI</dt>
            <dd>
              <a href="https://doi.org/10.7717/peerj.1545" itemprop="sameAs">10.7717/peerj.1545</a>
              <meta itemprop="sameAs" content="info:doi/10.7717/peerj.1545"/>
            </dd>
          </dl>
          <dl class="article-dates">
            <dt>Published</dt>
            <dd>
              <time itemprop="datePublished">2016-01-12</time>
            </dd>
            <dt>Accepted</dt>
            <dd>
              <time data-itemprop="dateAccepted">2015-12-09</time>
            </dd>
            <dt>Received</dt>
            <dd>
              <time itemprop="dateCreated">2015-08-25</time>
            </dd>
          </dl>
          <dl class="article-editors">
            <dt>Academic Editor</dt>
            <dd itemprop="editor" itemscope="itemscope" itemtype="http://schema.org/Person">
              <a itemprop="url" href="editor-1" class="contrib" data-jats-contrib-type="editor">
                <span class="name" itemprop="name"><span class="given-names" itemprop="givenName">Alexander</span> <span class="surname" itemprop="familyName">Mikheyev</span></span>
              </a>
            </dd>
          </dl>
          <dl class="article-subjects">
            <dt>Subject Areas</dt>
            <dd><a class="subject" itemprop="about" href="/subjects/?filter=Biodiversity">Biodiversity</a>, <a class="subject" itemprop="about" href="/subjects/?filter=Biogeography">Biogeography</a>, <a class="subject" itemprop="about" href="/subjects/?filter=Zoology">Zoology</a></dd>
            <dt>Keywords</dt>
            <dd><span class="kwd" itemprop="keywords">Alien species</span>, <span class="kwd" itemprop="keywords">Distribution patterns</span>, <span class="kwd" itemprop="keywords">Arid zone</span>, <span class="kwd" itemprop="keywords">Central Asia</span>, <span class="kwd" itemprop="keywords">Temporal trends</span>, <span class="kwd" itemprop="keywords">Oasis</span>, <span class="kwd" itemprop="keywords">Biological invasions</span></dd>
          </dl>
          <dl class="article-license">
            <dt>Copyright</dt>
            <dd>© <span itemprop="copyrightYear">2016</span> <span itemprop="copyrightHolder">Zhang and Jiang</span></dd>
            <dt>Licence</dt>
            <dd>
          <span class="license-p">This is an open access article distributed under the terms of the <a class="ext-link" href="http://creativecommons.org/licenses/by/4.0/" rel="license" data-jats-ext-link-type="uri">Creative Commons Attribution License</a>, which permits unrestricted use, distribution, reproduction and adaptation in any medium and for any purpose provided that it is properly attributed. For attribution, the original author(s), title, publication source (PeerJ) and either DOI or URL of the article must be cited.</span>
        </dd>
          </dl>
          <dl class="self-citation">
            <dt>Cite this article</dt>
            <dd><span class="self-citation-authors">Zhang L, Jiang Z.</span> <span class="self-citation-year">2016</span>. <span class="self-citation-title">Unveiling the status of alien animals in the arid zone of Asia</span>. <span itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationVolume"><span class="self-citation-journal" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/Periodical"><span itemprop="name">PeerJ</span></span> <span class="self-citation-volume" itemprop="volumeNumber">4</span></span>:<span class="self-citation-elocation" itemprop="pageStart">e1545</span> <a href="https://doi.org/10.7717/peerj.1545" itemprop="url">https://doi.org/10.7717/peerj.1545</a></dd>
          </dl>
        </div>
        <div>
          <h2>Abstract</h2>
          <div class="abstract" itemprop="description">
        <p>Biological invasion is one of the most threatening factors for biodiversity conservation. Lacking information on alien species in certain regions of the world hampers a balanced understanding of invasion processes and efficient data exchange among stakeholders. Current knowledge gaps are in need of urgent concern. We therefore conducted a review on alien animals in Xinjiang, an unknown region of invasion ecology. Xinjiang lies in the heartland of the Asian continent, covering an area of 1,664,900 km<sup>2</sup>. In the past 64 years, 128 alien animal species were recorded in this region, 39% of which became invasive and led to loss of native biodiversity. Most of these species were introduced through diversification of local agriculture and aquaculture. This process was aggravated by improving transportation and flourishing trade. Multiple linear regression models and correlation analysis were run for explaining influence of environmental and anthropogenic factors on status of alien animals: economically developed areas with abundant water resource, oases in particular, were prone to be hotspots of alien animal species in this arid and semi-arid region. This study also revealed that taxonomically biased and lagged research were critical problems that impeded studies on biological invasions in Xinjiang, and proposed feasible solutions.</p>
      </div>
        </div>
      </header>
      <main>
        <div class="body" lang="en">
    <section class="sec" id="intro">
      <h2 class="heading">Introduction</h2>
      <p id="p-1">Biological invasions caused by alien species (non-native or exotic species) have challenged biodiversity conservation and environmental protection globally (<a class="xref xref-bibr" href="https://scholar.google.com/scholar_lookup?title=Ecosystems and Human Well-Being: Current State and Trends: Findings of the Condition and Trends Working Group&amp;author=&amp;publication_year=2005" title="Ecosystems and Human Well-Being: Current State and Trends: Findings of the Condition and Trends Working Group" data-jats-ref-type="bibr" data-jats-rid="ref-32">Millennium Ecosystem Assessment, 2005</a>). For coping with present impacts and potential threats, a promising way forward would be to increase effective knowledge transfer among scientists, practitioners and policymakers, in order to facilitate engagement of stakeholders and develop innovative solutions (<a class="xref xref-bibr" href="https://doi.org/10.1111%2F1365-2664.12470" title="Invasion pathways at a crossroad: policy &amp; research challenges for managing alien species introductions" data-jats-ref-type="bibr" data-jats-rid="ref-20">Hulme, 2015</a>). However, disproportionate research effort in different regions has hindered a balanced understanding on biological invasions. Intensive research in specific regions, such as Europe and North America, does provide in-depth knowledge to this filed (<a class="xref xref-bibr" href="https://scholar.google.com/scholar_lookup?title=The (bio)diversity of science reflects the interests of society&amp;author=Wilson&amp;publication_year=2007" title="The (bio)diversity of science reflects the interests of society" data-jats-ref-type="bibr" data-jats-rid="ref-49">Wilson et al., 2007</a>). Nevertheless, complex and context-dependent processes in generalization of invasion processes are likely to be impeded in certain parts of the world, especially in Asia and tropical Africa, by scarce availability of studies (<a class="xref xref-bibr" href="https://scholar.google.com/scholar_lookup?title=Show me the numbers: what data currently exist for non-native species in the USA?&amp;author=Crall&amp;publication_year=2006" title="Show me the numbers: what data currently exist for non-native species in the USA?" data-jats-ref-type="bibr" data-jats-rid="ref-7">Crall et al., 2006</a>; <a class="xref xref-bibr" href="https://doi.org/10.1016%2Fj.tree.2008.02.002" title="Geographical and taxonomic biases in invasion ecology" data-jats-ref-type="bibr" data-jats-rid="ref-36">Pyšek et al., 2008</a>). Asia is a continent with dense human activities and high habitat heterogeneity, holding the lowest number of naturalized alien species (<a class="xref xref-bibr" href="https://doi.org/10.1016%2Fj.tree.2008.02.002" title="Geographical and taxonomic biases in invasion ecology" data-jats-ref-type="bibr" data-jats-rid="ref-36">Pyšek et al., 2008</a>). Such status may be the result of a combination of both insufficient research and incomplete recording caused by under-represented information of alien species in English-language literature (<a class="xref xref-bibr" href="https://doi.org/10.1007%2Fs10530-014-0686-1" title="Patterns of non-randomness in the composition and characteristics of the Taiwanese bird trade" data-jats-ref-type="bibr" data-jats-rid="ref-44">Su, Cassey &amp; Blackburn, 2014</a>). For helping filling these gaps of knowledge, it is necessary to collect data from those “poorly-known regions” of biological invasions and deliver them to the globe.</p>
      <p id="p-2">In this study we conducted a review related to alien animal species occurring in China’s Xinjiang Uyghur Autonomous Region (N 34°22′–49°33′, E 73°41′–96°18′, Xinjiang hereafter), for contributing to fill in the information gaps of biological invasions in Asia. Xinjiang is a region spanning 1,664,900 km<sup>2</sup> located in the heartland of the Asia Continent, encompassing the geographical centre of Asia (N 43°40′37″, E 87°19′52″). Divided by the centrally located Tianshan Mountain Range, Xinjiang has two main geographic regions: north and south. The northern region of Xinjiang mainly contains the Junggar Basin, the Ili Valley and south part of the Altay Mountains. The southern region includes Kunlun Mountains, East Pamirs, the Tarim Basin which is dominated by Taklimakan Desert, and oases around the basin. Most of areas in Xinjiang are arid or semi-arid because of the strong influence of continental climate. To increase farmlands, local government built channels to divert water from rivers and lakes for extending oases into the desert, thereby facilitating the formation of semi-artificial landscapes. Zoogeographically, Xinjiang belongs to the Palearctic realm, bordering the Sino-Japanese realm in the south (<a class="xref xref-bibr" href="https://doi.org/10.1126%2Fscience.1228282" title="An update of Wallace’s zoogeographic regions of the world" data-jats-ref-type="bibr" data-jats-rid="ref-17">Holt et al., 2013</a>). Its native fauna is mainly composed of desert animal group, alpine desert group and alpine forest steppe group (<a class="xref xref-bibr" href="https://scholar.google.com/scholar_lookup?title=Zoogeography of China&amp;author=Zhang&amp;publication_year=1999" title="Zoogeography of China" data-jats-ref-type="bibr" data-jats-rid="ref-56">Zhang, 1999</a>).</p>
      <p id="p-3">Xinjiang deserves attention of invasion ecology not only for its geographic location but also for its economic context. During ancient times, the famous trade route “Silk Road,” which linked the city Chang’ an (located near to the modern city Xi’an in northwest China) and the Mediterranean Sea region, had passed through Xinjiang since the Han Dynasty (206 B.C.–220 A.D.). However, the region was in economic isolation when the trading along the Silk Road vanished at the fall of the Mongol Empire. Since the middle of the 20<sup>th</sup> century, powered by economic and transportation development of China (<a class="xref xref-bibr" href="https://doi.org/10.1641%2FB580407" title="China’s booming economy is sparking and accelerating biological invasions" data-jats-ref-type="bibr" data-jats-rid="ref-9">Ding et al., 2008</a>; <a class="xref xref-bibr" href="https://scholar.google.com/scholar_lookup?title=Patterns of plant invasions in China: Taxonomic, biogeographic, climatic approaches and anthropogenic effects&amp;author=Wu&amp;publication_year=2010" title="Patterns of plant invasions in China: Taxonomic, biogeographic, climatic approaches and anthropogenic effects" data-jats-ref-type="bibr" data-jats-rid="ref-50">Wu et al., 2010</a>), Xinjiang has reopened to the world at unprecedented pace and scale. In 2014, in order to revive the ancient trade route, the Chinese government unveiled the blueprint of the “New Silk Road”: Xinjiang will become the forefront of national economic development, which implies a faster increase of human activities in the future. In this complex ecological and socioeconomic context, we intended to answer the following questions related to Xinjiang’s alien animals, as well as the causes and consequences on the region: what alien animal species have been detected in Xinjiang? How did they arrive here? What are the main factors driving such a process? What are their biological and social impacts? By answering these questions, the study strives to provide clearly and openly regional information to global research, and will also help to promote local studies by revealing existing threats, for the sake of developing effective management strategies on biological invasions.</p>
      <p id="p-4">Supported by experts with taxonomic and ecological expertise, we compiled data on alien animal species in Xinjiang from both English and Chinese literature. Specifically, this study aimed to: (1) present an updated inventory of alien animal species in Xinjiang; (2) assess taxonomic composition of listed alien animal species, as well as characterize variations in their distribution and temporal trends, and (3) explore environmental and anthropogenic factors associated with the arrival, establishment and invasion of alien animals in the context of an arid and semi-arid region.</p>
    </section>
    <section class="sec" id="methods">
      <h2 class="heading">Methods</h2>
      <section class="sec">
        <h3 class="heading">Data extraction</h3>
        <p id="p-5">Most of the records of alien animal species in Xinjiang were extracted from the “Biodiversity Assessment Report of Xinjiang” (<a class="xref xref-bibr" href="https://scholar.google.com/scholar_lookup?title=Biodiversity Distribution and Assessment of Xinjiang Uygur Autonomous Region&amp;author=Yuan&amp;publication_year=2012" title="Biodiversity Distribution and Assessment of Xinjiang Uygur Autonomous Region" data-jats-ref-type="bibr" data-jats-rid="ref-54">Yuan, Li &amp; Lv, 2012</a>) which contributed with its data to the Biodiversity Assessment Project of China. However, some alien animals were missing in this report as a result of incomplete knowledge on definition of “alien species.” Therefore, we followed the definition of alien species proposed by <a class="xref xref-bibr" href="https://scholar.google.com/scholar_lookup?title=A compendium of essential concepts and terminology in invasion ecology&amp;author=Richardson&amp;publication_year=2011" title="A compendium of essential concepts and terminology in invasion ecology" data-jats-ref-type="bibr" data-jats-rid="ref-39">Richardson, Pyšek &amp; Carlton (2011)</a>, as “species have been moved beyond their native geographic range by human activity.” Records of animal species were then retrieved in <i>Fishes of Xinjiang Uygur Autonomous Region, China</i> (<a class="xref xref-bibr" href="https://scholar.google.com/scholar_lookup?title=Fishes of Xinjiang Uygur Autonomous Region, China&amp;author=Guo&amp;publication_year=2012" title="Fishes of Xinjiang Uygur Autonomous Region, China" data-jats-ref-type="bibr" data-jats-rid="ref-13">Guo, Zhang &amp; Cai, 2012b</a>), <i>A checklist on the distribution of the birds in Xinjiang</i> (<a class="xref xref-bibr" href="https://scholar.google.com/scholar_lookup?title=A Checklist on the Distribution of the Birds in Xinjiang&amp;author=Ma&amp;publication_year=2011" title="A Checklist on the Distribution of the Birds in Xinjiang" data-jats-ref-type="bibr" data-jats-rid="ref-29">Ma, 2011</a>), and the <i>Handbook of insects in Xinjiang</i> (<a class="xref xref-bibr" href="https://scholar.google.com/scholar_lookup?title=Handbook of Insects in Xinjiang&amp;author=Hu&amp;publication_year=2013" title="Handbook of Insects in Xinjiang" data-jats-ref-type="bibr" data-jats-rid="ref-16">Hu et al., 2013</a>) to identify alien species according to the definition. Native or global distribution range of these species were recognized using the range descriptions in the Catalogue of Life (<a class="xref xref-bibr" href="http://www.catalogueoflife.org/col" title="Species 2000 &amp; ITIS Catalogue of Life, 18th March 2015" data-jats-ref-type="bibr" data-jats-rid="ref-40">Roskov et al., 2015</a>), Global Invasive Species Database (<a class="xref xref-bibr" href="http://www.issg.org/database/welcome/" title="Global Invasive Species Database" data-jats-ref-type="bibr" data-jats-rid="ref-22">ISSG, 2014</a>), and the Invasive Species Compendium (<a class="xref xref-bibr" href="http://www.cabi.org/isc" title="Invasive Species Compendium" data-jats-ref-type="bibr" data-jats-rid="ref-3">CABI, 2014</a>). For the species’ native range described as “China” in these databases, we specified their native range on national scale according to the species range map developed by the IUCN Red List (<a class="xref xref-bibr" href="http://www.iucnredlist.org" title="The IUCN Red List of Threatened Species" data-jats-ref-type="bibr" data-jats-rid="ref-21">IUCN, 2014</a>) and descriptive records in the <i>Fauna Sinica</i> (<a class="xref xref-bibr" href="http://www.zoology.csdb.cn/page/index.vpage" title="China Animal Scientific Database (in Chinese)" data-jats-ref-type="bibr" data-jats-rid="ref-4">CAS, 2015</a>). Information on introduction history and population status was extracted from peer-reviewed literatures. Considering that many papers were published in Chinese, our literature search was performed in the China Integrated Knowledge Resources Database (<a class="xref xref-bibr" href="http://www.zoology.csdb.cn/page/index.vpage" title="China Knowledge Resource Integrated Database (in Chinese)" data-jats-ref-type="bibr" data-jats-rid="ref-6">China Academic Journals Electronic Publishing House Co. Ltd., 2014</a>) to access data those are not covered by the online search engine Web of Science™. We searched all available fields including the title, abstract, article, topic, and full text containing the terms: “alien,” “introduced,” “non-native” or “exotic species” or “biological invasions” or alien species names (such as <i>Ondatra zibethicus</i>), and “Xinjiang” to extract information. Information from grey literatures was referenced provided that reliability was confirmed through further expert consultation.</p>
      </section>
      <section class="sec">
        <h3 class="heading">Data compiling and analysis</h3>
        <p id="p-6">We compiled a dataset organized by taxonomic groups, containing the records of occurrence site, population status, native range, likely introducing pathways, and first recorded time in Xinjiang. Population status of the alien animal species was defined by current population size and changes in range size, according to the definition in the unified framework for biological invasions (<a class="xref xref-bibr" href="https://scholar.google.com/scholar_lookup?title=A proposed unified framework for biological invasions&amp;author=Blackburn&amp;publication_year=2011" title="A proposed unified framework for biological invasions" data-jats-ref-type="bibr" data-jats-rid="ref-2">Blackburn et al., 2011</a>): “non-established population”: only a few live individuals in a single location but either failed to survive or fail to reproduce, or propagated several individuals within the barrier of captivity of cultivation. “Established population” refers to established self-sustaining populations in wild after several generations. “Invasive population” referes to a population with individuals disperse, survive and reproduce in a range with significant distance from the original point of introduction. Species that lack of population data or had no relevant description were classified as “present but no details.” Likely pathways of introductions were classified as aquaculture, farming, pet trade, unintentional introductions along with plants or aquatic products. The year when the alien animal species was recorded for the first time in Xinjiang was also included in the dataset if the information was available. We performed the following analysis on the alien species with the dataset.</p>
        <p id="p-7">To explore influencing factors of alien animal invasions, we selected 10 potential explanatory variables and divided them into three classes related to environmental (I–II) and anthropogenic factors (III) as follows: (I) Geography: (1) total land area (km<sup>2</sup>); (2) total area of wetlands, including area of rivers, lakes and marshland (km<sup>2</sup>); (3) annual volume of surface water resource (ton). (II) Climate: (4) mean annual temperature (°C); (5) mean annual precipitation (mm); (6) difference in mean July and January temperature (°C). (III) Anthropogenic factors: (7) land use, area of land used by human in the prefecture (km<sup>2</sup>), including land for farm use such as cultivation, gardening, woodland, pastureland <i>etc.</i>, and land for construction; (8) gross domestic production (GDP) of each prefecture (USD); (9) transportation development status, using the share of transportation output in GDP as the surrogate (%); (10) status of foreign trade development, reflected by the share of imports in GDP (%). We extracted values of all these variables for each prefecture (an administrative level under province but above county in China) from the <i>Statistic Yearbook of Xinjiang</i> (<a class="xref xref-bibr" href="https://scholar.google.com/scholar_lookup?title=Statistic Yearbook of Xinjiang&amp;author=Chen&amp;publication_year=2014" title="Statistic Yearbook of Xinjiang" data-jats-ref-type="bibr" data-jats-rid="ref-5">Chen, 2014</a>). Statistic data after 1978, the year when systematic statistics began in Xinjiang, were used for analysis despite of the limitation on explaining historical processes of invasion (<a class="xref xref-bibr" href="https://doi.org/10.1073%2Fpnas.1002314107" title="Disentangling the role of environmental and human pressures on biological invasions across Europe" data-jats-ref-type="bibr" data-jats-rid="ref-37">Pyšek et al., 2010</a>). Multiple linear regression models were used to account for the relationship between potential variables and the number of alien species of each prefecture. To normalize the data, prefecture area, wetland area, area of land used by human, GDP of each prefecture, transportation share of GDP and imports share of GDP were log-transformed before analysis. Durbin-Watson test was used for assessing the independence of the residuals (explained in detail in <a class="xref xref-supplementary-material" href="#supp-1" data-jats-ref-type="supplementary-material" data-jats-rid="supp-1">Table S1</a>). Collinearity of variables was checked by calculating tolerance values, eigenvalues and condition indices. We conducted correlation analysis to characterize temporal associations between number of new records of alien animal species per year and anthropogenic factors. We averaged GDP, transportation share of GDP and import share of GDP of every five-year period for analysis. We excluded environmental factors and land used by human in this part of analyses because they were relatively constant on a 30-year temporal scale.</p>
      </section>
    </section>
    <section class="sec" id="results">
      <h2 class="heading">Results</h2>
      <section class="sec">
        <h3 class="heading">Alien animal species in Xinjiang</h3>
        <p id="p-8">A total of 128 alien animal species have been recorded in Xinjiang since 1950, including 9 mammals, 9 birds, 2 reptiles, 2 amphibians, 45 fishes, 57 insects and 4 arachnids (<a class="xref xref-table" href="#table-1" data-jats-ref-type="table" data-jats-rid="table-1">Table 1</a>). They accounted for 9% of 765 vertebrates, and nearly 5% of over 1280 insects and arachnids of local fauna (<a class="xref xref-fig" href="#fig-1" data-jats-ref-type="fig" data-jats-rid="fig-1">Fig. 1</a>). According to the definition of invasion stages (<a class="xref xref-bibr" href="https://scholar.google.com/scholar_lookup?title=A proposed unified framework for biological invasions&amp;author=Blackburn&amp;publication_year=2011" title="A proposed unified framework for biological invasions" data-jats-ref-type="bibr" data-jats-rid="ref-2">Blackburn et al., 2011</a>) and status of the alien populations, we determined that 40 of 128 species have already established self-sustaining populations in the wild. 50 species were determined as “invasive” for their massive population growth and range expanding observed, which constituted nearly a quarter of 198 invasive alien animal species recorded in China (<a class="xref xref-bibr" href="https://doi.org/10.3897%2Fneobiota.15.3575" title="An inventory of invasive alien species in China" data-jats-ref-type="bibr" data-jats-rid="ref-52">Xu et al., 2012</a>). For these invaders in Xinjiang, terrestrial arthropods accounted for the majority (36 species, 72%), followed by fishes (11 species, 22%). A total of 16 species were determined as cultivated populations kept within man-made barriers and 22 species were recorded as “present, without details.” Referring to the ‘10s rule’ (10% of alien species can establish self-sustaining population, and 10% of these established species can become invasive or problematic), the rate of established and invasive species in Xinjiang appears to be exceptionally high. A possible reason is that the actual number of alien animal species should be much higher than the previously recorded, because it was often hard to detect species less impacting local economy or biodiversity (non-problematic species). A total of 67% of recorded vertebrate alien animals and a honey bee (<i>Apis mellifera</i>) were intentionally introduced. Unintentional introductions included following two cases: alien animal species that were brought into Xinjiang with commodities (79% of listed arthropods and 31% of fishes), and alien animal species that had been introduced to neighboring areas (for example, Kazakhstan) by human before they dispersed into Xinjiang naturally (12 species). As to likely pathways of introduction, five in nine alien mammal species were introduced for fur farming, eight of nine alien bird species were traded into Xinjiang as pets, 87% of alien fishes were introduced for aquaculture, 75% alien insects and all alien arachnids were carried to Xinjiang along with flows of agricultural products, plantlets, fruits or ornamental flowers. Chinese softshell turtle (<i>Pelodiscus sinensis</i>), wattle-necked softshell turtle (<i>Palea steindachneri</i>) and common bullfrog (<i>Lithobates catesbeianus</i>) were introduced for aquaculture. Common clawed frog (<i>Xenopus laevis</i>) entered Xinjiang as pets. Detailed information on alien animals of Xinjiang was listed in <a class="xref xref-table" href="#table-1" data-jats-ref-type="table" data-jats-rid="table-1">Table 1</a>.</p>
        <figure class="fig" itemprop="image" itemscope="itemscope" itemtype="https://schema.org/ImageObject" id="fig-1"><div class="image-container"><a href="https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/fig-1-2x.jpg" title="View the full image" class="fresco" data-fresco-caption="Figure 1: Number of recorded alien animal species and aliens’ ratio in local animal species pool." data-fresco-group="figure" data-fresco-options="fit: 'width', ui: 'outside', thumbnails: false, loop: true, position: true, overflow: true, preload: false"><img class="graphic" src="https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/fig-1-1x.jpg" itemprop="contentUrl" sizes="(min-width: 1200px) 581px, (max-width: 1199px) and (min-width: 980px) 462px, (max-width: 979px) and (min-width: 768px) 347px, (max-width: 767px) calc(100vw - 50px)" srcset="https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/fig-1-2x.jpg 1200w, https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/fig-1-1x.jpg 600w, https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/fig-1-small.jpg 355w" data-image-id="fig-1" alt="Number of recorded alien animal species and aliens’ ratio in local animal species pool." data-full="https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/fig-1-full.png" data-thumb="https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/fig-1-thumb.jpg" data-original="https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/fig-1.png" data-image-type="figure" data-jats-mimetype="image" data-jats-mime-subtype="png"/></a></div><figcaption itemprop="description">
            <h4 class="heading"><span class="caption-label">Figure 1: </span>Number of recorded alien animal species and aliens’ ratio in local animal species pool.</h4>
            <span class="p">Capacity of local animal species pool for each taxon shown on the right end of the bar was extracted from several peer-reviewed publications on fauna of Xinjiang. Arachnids: <a class="xref xref-bibr" href="https://scholar.google.com/scholar_lookup?title=Spiders from agricultural areas of Xinjiang Uygur Autonomous Region, China&amp;author=Hu&amp;publication_year=2013" title="Spiders from agricultural areas of Xinjiang Uygur Autonomous Region, China" data-jats-ref-type="bibr" data-jats-rid="ref-15a">Hu &amp; Wu (1989)</a> (<a class="xref xref-supplementary-material" href="#supp-5" data-jats-ref-type="supplementary-material" data-jats-rid="supp-5">Supplemental Reference</a>); Birds: <a class="xref xref-bibr" href="https://scholar.google.com/scholar_lookup?title=A Checklist on the Distribution of the Birds in Xinjiang&amp;author=Ma&amp;publication_year=2011" title="A Checklist on the Distribution of the Birds in Xinjiang" data-jats-ref-type="bibr" data-jats-rid="ref-29">Ma (2011)</a>; Mammals, reptiles and amphibians: <a class="xref xref-bibr" href="https://scholar.google.com/scholar_lookup?title=Biodiversity Distribution and Assessment of Xinjiang Uygur Autonomous Region&amp;author=Yuan&amp;publication_year=2012" title="Biodiversity Distribution and Assessment of Xinjiang Uygur Autonomous Region" data-jats-ref-type="bibr" data-jats-rid="ref-54">Yuan, Li &amp; Lv (2012)</a>; Fishes: <a class="xref xref-bibr" href="https://scholar.google.com/scholar_lookup?title=Fishes of Xinjiang Uygur Autonomous Region, China&amp;author=Guo&amp;publication_year=2012" title="Fishes of Xinjiang Uygur Autonomous Region, China" data-jats-ref-type="bibr" data-jats-rid="ref-13">Guo, Zhang &amp; Cai (2012b)</a>; Insects: <a class="xref xref-bibr" href="https://scholar.google.com/scholar_lookup?title=Handbook of Insects in Xinjiang&amp;author=Hu&amp;publication_year=2013" title="Handbook of Insects in Xinjiang" data-jats-ref-type="bibr" data-jats-rid="ref-16">Hu et al. (2013)</a>.</span>
          <div class="figcaption-footer"><div class="article-image-download"><a href="https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/fig-1-full.png" class="btn btn-mini" download="peerj-1545-fig-1.png" itemprop="url"><i class="icon-large icon-picture"> </i> Download full-size image</a></div><div class="object-id article-component-doi">DOI: <a href="https://doi.org/10.7717/peerj.1545/fig-1" data-toggle="tooltip" title="Cite this object using this DOI">10.7717/peerj.1545/fig-1</a></div></div></figcaption></figure>
        <figure class="table-wrap" id="table-1"><div class="caption"><span class="caption-label">Table 1: </span>
            <div class="title">List of alien animal species recorded in Xinjiang.</div>
          </div>
          
          
          
          <div class="table-container"><table class="table table-bordered table-condensed table-hover">
              <colgroup>
                <col/>
                <col/>
                <col/>
                <col/>
                <col/>
                <col/>
                <col/>
              </colgroup>
              <thead>
                <tr>
                  <th>Order</th>
                  <th>Species</th>
                  <th>Population Status<a class="xref xref-fn" href="#table-1fn1" data-jats-ref-type="fn" data-jats-rid="table-1fn1"><sup>a</sup></a></th>
                  <th>1st Recorded Time<a class="xref xref-fn" href="#table-1fn2" data-jats-ref-type="fn" data-jats-rid="table-1fn2"><sup>b</sup></a></th>
                  <th>Introducing Pathways<a class="xref xref-fn" href="#table-1fn3" data-jats-ref-type="fn" data-jats-rid="table-1fn3"><sup>c</sup></a></th>
                  <th>Native Range<a class="xref xref-fn" href="#table-1fn4" data-jats-ref-type="fn" data-jats-rid="table-1fn4"><sup>d</sup></a></th>
                  <th>Distribution Range<a class="xref xref-fn" href="#table-1fn4" data-jats-ref-type="fn" data-jats-rid="table-1fn4"><sup>d</sup></a></th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td>
                    <b>Artiodactyla</b>
                  </td>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                </tr>
                <tr>
                  <td/>
                  <td><i>Cervus nippon</i> (Temminck, 1838)</td>
                  <td>NE</td>
                  <td>2010</td>
                  <td>If</td>
                  <td>Southern China; Japan; Russian Federation</td>
                  <td>Australia; Europe &amp; Northern Asia (excluding China); North America; Southern Asia</td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Lama glama</i> (Linnaeus, 1758)</td>
                  <td>NE</td>
                  <td>2004</td>
                  <td>If</td>
                  <td>South America</td>
                  <td/>
                </tr>
                <tr>
                  <td>
                    <b>Carnivora</b>
                  </td>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                </tr>
                <tr>
                  <td/>
                  <td><i>Neovison vison</i> (Schreber, 1777)</td>
                  <td>E</td>
                  <td>1963</td>
                  <td>If</td>
                  <td>North America</td>
                  <td>North America; Europe; Japan</td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Mustela lutreola</i> (Linnaeus, 1761)</td>
                  <td>E</td>
                  <td>1963</td>
                  <td>If</td>
                  <td>France; Romania; Russian Federation; Spain; Ukraine</td>
                  <td>Europe and Northern Asia (excluding China)</td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Urocyon cinereoargenteus</i> (Schreber, 1775)</td>
                  <td>P</td>
                  <td>1997</td>
                  <td>If</td>
                  <td>Middle America; North America; South America</td>
                  <td>Middle America; North America; South America</td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Nyctereutes procyonoides</i> (Gray, 1834)</td>
                  <td>NE</td>
                  <td/>
                  <td>If</td>
                  <td>Far East Asia; Eastern and Southern China; Japan</td>
                  <td>Europe and Northern Asia; Southern Asia</td>
                </tr>
                <tr>
                  <td>
                    <b>Rodentia</b>
                  </td>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                </tr>
                <tr>
                  <td/>
                  <td><i>Ondatra zibethicus</i> (Linnaeus, 1766)</td>
                  <td>I</td>
                  <td>1950s</td>
                  <td>ND+If</td>
                  <td/>
                  <td>Europe and Northern Asia (excluding China); North America; South America; Southern Asia</td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Rattus norvegicus</i> (Berkenhout, 1769)</td>
                  <td>I</td>
                  <td>1975</td>
                  <td>UI</td>
                  <td/>
                  <td>Australia; North America; Southern Asia</td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Rattus flavipectus</i> (Milne-Edwards, 1871)</td>
                  <td>E</td>
                  <td>1994</td>
                  <td>UI</td>
                  <td>Shanxi, Gansu provinces and most southern areas of China<a class="xref xref-fn" href="#table-1fn5" data-jats-ref-type="fn" data-jats-rid="table-1fn5"><sup>1</sup></a></td>
                  <td/>
                </tr>
                <tr>
                  <td>
                    <b>Anseriformes</b>
                  </td>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                </tr>
                <tr>
                  <td/>
                  <td><i>Branta canadensis</i> (Linnaeus, 1758)</td>
                  <td>P</td>
                  <td>after 2001</td>
                  <td>U</td>
                  <td>Middle and North America</td>
                  <td>Middle America; North America; Oceania; Europe</td>
                </tr>
                <tr>
                  <td>
                    <b>Psittaciformes</b>
                  </td>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                </tr>
                <tr>
                  <td/>
                  <td><i>Trichoglossus haematodus</i> (Linnaeus, 1771)</td>
                  <td>P</td>
                  <td>after 2001</td>
                  <td>Ipe</td>
                  <td>Indonesia; New Caledonia; Papua New Guinea; Solomon Islands; Vanuatu</td>
                  <td/>
                </tr>
                <tr>
                  <td/>
                  <td><i>Psittacula krameri</i> (Scopoli, 1769)</td>
                  <td>P</td>
                  <td/>
                  <td>Ipe</td>
                  <td>Central Africa; South Asia</td>
                  <td>Southern and western Asia; Europe; Central Africa; North America; Oceania</td>
                </tr>
                <tr>
                  <td>
                    <b>Passeriformes</b>
                  </td>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                </tr>
                <tr>
                  <td/>
                  <td><i>Sturnus nigricollis</i> (Paykull, 1807)</td>
                  <td>P</td>
                  <td>before 2010</td>
                  <td>Ipe</td>
                  <td>Southeastern Asia</td>
                  <td/>
                </tr>
                <tr>
                  <td/>
                  <td><i>Spodiopsar sericeus</i> (Gmelin, 1789)</td>
                  <td>P</td>
                  <td>2011</td>
                  <td>Ipe</td>
                  <td>Southeastern China<a class="xref xref-fn" href="#table-1fn6" data-jats-ref-type="fn" data-jats-rid="table-1fn6"><sup>2</sup></a></td>
                  <td/>
                </tr>
                <tr>
                  <td/>
                  <td><i>Acridotheres cristatellus</i> (Linnaeus, 1758)</td>
                  <td>P</td>
                  <td>before 2010</td>
                  <td>Ipe</td>
                  <td>Southern China; Lao; Myanmar; Taiwan; Vietnam</td>
                  <td/>
                </tr>
                <tr>
                  <td/>
                  <td><i>Acridotheres tristis</i> (Linnaeus, 1766)</td>
                  <td>I</td>
                  <td>1986</td>
                  <td>Ipe+ND</td>
                  <td>Southern and western Asia</td>
                  <td/>
                </tr>
                <tr>
                  <td/>
                  <td><i>Spodiopsar cineraceus</i> (Temminck, 1835)</td>
                  <td>P</td>
                  <td>2006</td>
                  <td>Ipe</td>
                  <td>Eastern and central China<a class="xref xref-fn" href="#table-1fn6" data-jats-ref-type="fn" data-jats-rid="table-1fn6"><sup>2</sup></a>; Mongolia; Japan; Korean Peninsula</td>
                  <td/>
                </tr>
                <tr>
                  <td/>
                  <td><i>Lonchura oryzivora</i> (Linnaeus, 1758)</td>
                  <td>P</td>
                  <td/>
                  <td>Ipe</td>
                  <td/>
                  <td>Caribbean; Oceania; Southern Asia</td>
                </tr>
                <tr>
                  <td>
                    <b>Anura</b>
                  </td>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                </tr>
                <tr>
                  <td/>
                  <td><i>Lithobates catesbeianus</i> (Shaw, 1802)</td>
                  <td>E</td>
                  <td>1967</td>
                  <td>Ia</td>
                  <td>North America</td>
                  <td>North and central America; Southwestern Europe; Japan; China</td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Xenopus laevis</i> (Daudin, 1802)</td>
                  <td>P</td>
                  <td/>
                  <td>Ipe</td>
                  <td>Central and southern Africa</td>
                  <td/>
                </tr>
                <tr>
                  <td>
                    <b>Testudines</b>
                  </td>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                </tr>
                <tr>
                  <td/>
                  <td><i>Pelodiscus sinensis</i> (Wiegmann, 1835)</td>
                  <td>NE</td>
                  <td/>
                  <td>Ia</td>
                  <td>Central and Southern China; Lao’s; Japan</td>
                  <td/>
                </tr>
                <tr>
                  <td/>
                  <td><i>Palea steindachneri</i> (Siebenrock, 1906)</td>
                  <td>NE</td>
                  <td/>
                  <td>Ia</td>
                  <td>Southern China; Lao’s; Vietnam</td>
                  <td/>
                </tr>
                <tr>
                  <td>
                    <b>Acipenseriformes</b>
                  </td>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                </tr>
                <tr>
                  <td/>
                  <td><i>Acipenser nudiventris</i> (Lovetsky, 1828)</td>
                  <td>E</td>
                  <td>1945</td>
                  <td>Ia+ND</td>
                  <td/>
                  <td>Black, Azov, Caspian and Aral Sea</td>
                </tr>
                <tr>
                  <td>
                    <b>Salmoniformes</b>
                  </td>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                </tr>
                <tr>
                  <td/>
                  <td><i>Oncorhynchus mykiss</i> (Walbaum, 1792)</td>
                  <td>E</td>
                  <td>1996</td>
                  <td>Ia</td>
                  <td>Native to Pacific Slope from Kuskokwim River, Alaska to (at least) Rio Santa Domingo, Baja California, Mexico; upper Mackenzie River drainage (Arctic Basin), Alberta and British Columbia in Canada; endorheic basins of southern Oregon, USA</td>
                  <td/>
                </tr>
                <tr>
                  <td/>
                  <td><i>Oncorhynchus aguabonita</i> (Jordan, 1892)</td>
                  <td>P</td>
                  <td/>
                  <td>Ia</td>
                  <td/>
                  <td>North America</td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Oncorhynchus masou</i> (Brevoort, 1856)</td>
                  <td>NE</td>
                  <td>2006</td>
                  <td>Ia</td>
                  <td/>
                  <td>Kamchatka, Kuril Islands, Sakhalin, Primorsky Krai south through Korea, Taiwan and Japan</td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Salvelinus malma</i> (Walbaum, 1792)</td>
                  <td>NE</td>
                  <td>2004</td>
                  <td>Ia</td>
                  <td/>
                  <td>Arctic, Northwest to Northeast Pacific</td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Coregonus peled</i> (Gmelin, 1789)</td>
                  <td>I</td>
                  <td>1998</td>
                  <td>Ia</td>
                  <td/>
                  <td>Lakes and rivers from Mezen to Kolyma River, Russia</td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Coregonus migratorius</i> (Georgi, 1775)</td>
                  <td>E</td>
                  <td>1998</td>
                  <td>Ia</td>
                  <td/>
                  <td>Lake Baikal in northern Siberia. Also enters the tributaries Kichera, Verkhnyaya Anagara, Chivyrkui, Barguzin and Selenga</td>
                </tr>
                <tr>
                  <td>
                    <b>Osmeriformes</b>
                  </td>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                </tr>
                <tr>
                  <td/>
                  <td><i>Hypomesus nipponensis</i> (McAllister, 1963)</td>
                  <td>I</td>
                  <td>1989</td>
                  <td>Ia</td>
                  <td>Northwest Pacific</td>
                  <td>Japan to the Korean Peninsula</td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Protosalanx hyalocranius</i> (Abbott, 1901)</td>
                  <td>E</td>
                  <td>1995</td>
                  <td>Ia</td>
                  <td/>
                  <td>Northwest Pacific: Korea and temperate coast of China</td>
                </tr>
                <tr>
                  <td>
                    <b>Cypriniformes</b>
                  </td>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                </tr>
                <tr>
                  <td/>
                  <td><i>Cyprinus carpio</i> (Linnaeus, 1758)</td>
                  <td>I</td>
                  <td>1905</td>
                  <td>Ia</td>
                  <td/>
                  <td>Black, Caspian and Aral Sea basins</td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Pseudorasbora parva</i> (Temminck &amp; Schlegel, 1846)</td>
                  <td>I</td>
                  <td>1980</td>
                  <td>UIa</td>
                  <td/>
                  <td>Amur to Zhujiang drainages (Siberia, Korea and eastern China)</td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Abramis brama</i> (Linnaeus, 1758)</td>
                  <td>I</td>
                  <td>1959</td>
                  <td>UIa+ND</td>
                  <td/>
                  <td>Most European drainages from Adour (France) to Pechora (White Sea basin); from Marmara basin (Turkey) and eastward to Aral basin; Introduced in Lake Baikal and upper Ob and Yenisei drainages</td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Ctenopharyngodon idella</i> (Valenciennes, 1844)</td>
                  <td>E</td>
                  <td>1963</td>
                  <td>Ia</td>
                  <td/>
                  <td>Northeastern China to eastern Siberia (Amur River system)</td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Hypophthalmichthys molitrix</i> (Valenciennes, 1844)</td>
                  <td>I</td>
                  <td>1959</td>
                  <td>Ia</td>
                  <td>Major Pacific drainages of East Asia (from Amur to southeastern China)</td>
                  <td/>
                </tr>
                <tr>
                  <td/>
                  <td><i>Hypophthalmichthys nobilis</i> (Richardson, 1845)</td>
                  <td>E</td>
                  <td>1950s</td>
                  <td>Ia</td>
                  <td>Eastern China<a class="xref xref-fn" href="#table-1fn7" data-jats-ref-type="fn" data-jats-rid="table-1fn7"><sup>3</sup></a></td>
                  <td/>
                </tr>
                <tr>
                  <td/>
                  <td><i>Carassius auratus</i> (Linnaeus, 1758)</td>
                  <td>I</td>
                  <td>1960</td>
                  <td>UIa</td>
                  <td>Main drainages in eastern China, Taiwan, Korean Peninsula</td>
                  <td/>
                </tr>
                <tr>
                  <td/>
                  <td><i>Ictiobus cyprinellus</i> (Valenciennes, 1844)</td>
                  <td>NE</td>
                  <td>2000</td>
                  <td>Ia</td>
                  <td>North America</td>
                  <td/>
                </tr>
                <tr>
                  <td/>
                  <td><i>Mylopharyngodon piceus</i> (Richardson, 1846)</td>
                  <td>NE</td>
                  <td/>
                  <td>Ia</td>
                  <td/>
                  <td>Amur river basin to southern China of Asia</td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Leuciscus aspius</i> (Linnaeus, 1758)</td>
                  <td>I</td>
                  <td>1958</td>
                  <td>Ia</td>
                  <td/>
                  <td>European drainages; Introduced in Rhine, Northern Dvina and Lake Balkhash (Asia)</td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Parabramis pekinensis</i> (Basilewsky, 1855)</td>
                  <td>NE</td>
                  <td/>
                  <td>Ia</td>
                  <td/>
                  <td>Basin of the Amur, from Blagoveshchensk to the very mouths. Sungari, Ussuri, Lake Khanka, Liao. China south to Shanghai and Ningpo</td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Hemiculter leucisculus</i> (Basilewsky, 1855)</td>
                  <td>E</td>
                  <td/>
                  <td>UIa</td>
                  <td/>
                  <td>Eastern China, North and South Korea, Hong Kong, Japan and Amur River basin to Red River drainages; Mongolia. Introduced in Iran</td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Misgurnus mohoity</i> (Dybowski, 1869)</td>
                  <td>E</td>
                  <td/>
                  <td>UIa</td>
                  <td/>
                  <td>Northeast rivers (Heilongjiang) of China<a class="xref xref-fn" href="#table-1fn7" data-jats-ref-type="fn" data-jats-rid="table-1fn7"><sup>3</sup></a>; Mongolia and Russia</td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Abbottina rivularis</i> (Basilewsky, 1855)</td>
                  <td>I</td>
                  <td>1998</td>
                  <td>UIa</td>
                  <td>Eastern China</td>
                  <td>Eastern China, Korea and Japan. Introduced in the Mekong Basin. Recorded from Tedzhen River basin in Turkmenistan</td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Hemibarbus maculatus</i> (Bleeker, 1871)</td>
                  <td>E</td>
                  <td>1960</td>
                  <td>UIa</td>
                  <td/>
                  <td>Eastern China<a class="xref xref-fn" href="#table-1fn7" data-jats-ref-type="fn" data-jats-rid="table-1fn7"><sup>3</sup></a>, Korea, Japan and Amur River basin</td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Megalobrama amblycephala</i> (Yih, 1955)</td>
                  <td>NE</td>
                  <td>1980</td>
                  <td>Ia</td>
                  <td/>
                  <td>Middle reaches of Yangtze River, mainland China.</td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Megalobrama terminalis</i> (Richardson, 1846)</td>
                  <td>P</td>
                  <td>1965</td>
                  <td>UIa</td>
                  <td/>
                  <td>Amur basin to southern China</td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Rhodeus ocellatus</i> (Kner, 1866)</td>
                  <td>E</td>
                  <td/>
                  <td>UIa</td>
                  <td/>
                  <td>Eastern Asia and Taiwan; Russia</td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Rhodeus sinensis</i> (Günther, 1868)</td>
                  <td>E</td>
                  <td/>
                  <td>UIa</td>
                  <td/>
                  <td>South of Yangtze River, China; Korea</td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Luciobarbus brachycephalus</i> (Kessler, 1872)</td>
                  <td>E</td>
                  <td>1996</td>
                  <td>Ia+ND</td>
                  <td/>
                  <td>Southern and western Caspian Sea; Aral basin; River Chun (Kasakhstan)</td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Leuciscus baicalensis</i> (Dybowski, 1874)</td>
                  <td>I</td>
                  <td>1964</td>
                  <td>Ia+ND</td>
                  <td/>
                  <td>Ulungur Lake and Ulungur River in China (introduced<a class="xref xref-fn" href="#table-1fn8" data-jats-ref-type="fn" data-jats-rid="table-1fn8"><sup>4</sup></a>); Mongolia and rivers draining to the Arctic Ocean, from the Ob to the Kolyma</td>
                </tr>
                <tr>
                  <td>
                    <b>Siluriformes</b>
                  </td>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                </tr>
                <tr>
                  <td/>
                  <td><i>Silurus meridionalis</i> (Chen, 1977)</td>
                  <td>E</td>
                  <td>1991</td>
                  <td>Ia</td>
                  <td/>
                  <td>Middle Yangtze River basin, China<a class="xref xref-fn" href="#table-1fn7" data-jats-ref-type="fn" data-jats-rid="table-1fn7"><sup>3</sup></a></td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Silurus soldatovi</i> (Nikolskii &amp; Soin, 1948)</td>
                  <td>E</td>
                  <td>1970</td>
                  <td>Ia+ND</td>
                  <td/>
                  <td>Amur basin (Asia)</td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Clarias fuscus</i> (Lacepède, 1803)</td>
                  <td>NE</td>
                  <td>1990</td>
                  <td>Ia</td>
                  <td/>
                  <td>Subtropical area of China; Taiwan; Philippines and Vietnam; Hawaii</td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Clarias camerunensis</i> (Lönnberg, 1895)</td>
                  <td>NE</td>
                  <td/>
                  <td>Ia</td>
                  <td/>
                  <td>Coastal rivers in Togo to the lower and middle Congo River basin</td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Ameiurus nebulosus</i> (Lesueur, 1819)</td>
                  <td>E</td>
                  <td>1989</td>
                  <td>Ia</td>
                  <td/>
                  <td>North America drainages; Iran and Turkey</td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Ictalurus punctatus</i> (Rafinesque, 1818)</td>
                  <td>NE</td>
                  <td>1990</td>
                  <td>Ia</td>
                  <td/>
                  <td>North America: Central drainages of the United States to southern Canada and northern Mexico</td>
                </tr>
                <tr>
                  <td>
                    <b>Beloniformes</b>
                  </td>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                </tr>
                <tr>
                  <td/>
                  <td><i>Oryzias sinensis</i> (Chen, Uwa &amp; Chu, 1989)</td>
                  <td>E</td>
                  <td/>
                  <td>UIa</td>
                  <td/>
                  <td>Mekong, Irrawaddy, Salween, Red River and Nanpangjiang basins. Introduced in Kazakhstan where it is now abundant; established in lower Kuban drainage; spreading in Azov basin, discovered in River Obitochnaya, Ukraine</td>
                </tr>
                <tr>
                  <td>
                    <b>Perciformes</b>
                  </td>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                </tr>
                <tr>
                  <td/>
                  <td><i>Sander lucioperca</i> (Linnaeus, 1758)</td>
                  <td>E</td>
                  <td>1965</td>
                  <td>Ia+ND</td>
                  <td/>
                  <td>Caspian, Baltic, Black and Aral Sea basins; Elbe (North Sea basin) and Maritza (Aegean basin) drainages. North to about 65° N in Finland. Introduced widely</td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Siniperca chuatsi</i> (Basilewsky, 1855)</td>
                  <td>NE</td>
                  <td>1990</td>
                  <td>Ia</td>
                  <td/>
                  <td>Amur River basin and China</td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Oreochromis niloticus</i> (Linnaeus, 1758)</td>
                  <td>NE</td>
                  <td>1983</td>
                  <td>Ia</td>
                  <td/>
                  <td>Africa. Widely introduced for aquaculture</td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Rhinogobius cliffordpopei</i> (Nichols, 1925)</td>
                  <td>E</td>
                  <td>1998</td>
                  <td>UIa</td>
                  <td/>
                  <td>South China<a class="xref xref-fn" href="#table-1fn7" data-jats-ref-type="fn" data-jats-rid="table-1fn7"><sup>3</sup></a> and Vietnam</td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Rhinogobius brunneus</i> (Temminck &amp; Schlege, 1845)</td>
                  <td>E</td>
                  <td>1998</td>
                  <td>UIa</td>
                  <td/>
                  <td>River basin of the seas of Japan; Taiwan, rivers of Korea; South of Yangtze River and Nanpanjiang River of China<a class="xref xref-fn" href="#table-1fn7" data-jats-ref-type="fn" data-jats-rid="table-1fn7"><sup>3</sup></a>; Philippines; Vietnam. Introduced to the USA</td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Macropodus opercularis</i> (Linnaeus, 1758)</td>
                  <td>E</td>
                  <td>2005</td>
                  <td>UIa</td>
                  <td/>
                  <td>China, from Yangtze basin to the south, on Hainan Island, in Taiwan, north Vietnam; introduced to the tropical and subtropical world</td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Channa argus</i> (Cantor, 1842)</td>
                  <td>E</td>
                  <td>2000</td>
                  <td>Ia</td>
                  <td/>
                  <td>Amur southward to Xi Jiang and Hainan Island, China; Introduced elsewhere. Japan and the USA</td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Micropercops cinctus</i> (Dabry de Thiersant, 1872)</td>
                  <td>I</td>
                  <td/>
                  <td>UIa</td>
                  <td/>
                  <td>Amur southward to Xi Jiang, China</td>
                </tr>
                <tr>
                  <td>
                    <b>Prostigmata</b>
                  </td>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                </tr>
                <tr>
                  <td/>
                  <td><i>Tetranychus urticae</i> (Koch, 1836)</td>
                  <td>I</td>
                  <td/>
                  <td>UIpl</td>
                  <td>US; Western Europe and Mediterranean</td>
                  <td>Worldwide</td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Amphitetranychus viennensis</i> (Zacher, 1920)</td>
                  <td>I</td>
                  <td>1981</td>
                  <td>UIpl</td>
                  <td/>
                  <td/>
                </tr>
                <tr>
                  <td/>
                  <td><i>Panonychus ulmi</i> (Koch, 1836)</td>
                  <td>I</td>
                  <td>1995</td>
                  <td>UIpl</td>
                  <td>Europe</td>
                  <td/>
                </tr>
                <tr>
                  <td/>
                  <td><i>Aceria macrodonis</i> (Keifer, 1965)</td>
                  <td>E</td>
                  <td>1991</td>
                  <td>UIpl</td>
                  <td/>
                  <td/>
                </tr>
                <tr>
                  <td>
                    <b>Blattodea</b>
                  </td>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                </tr>
                <tr>
                  <td/>
                  <td><i>Blattella germanica</i> (Linnaeus, 1767)</td>
                  <td>I</td>
                  <td>1980</td>
                  <td>UI+ND</td>
                  <td/>
                  <td>Worldwide, African origin</td>
                </tr>
                <tr>
                  <td>
                    <b>Hymenoptera</b>
                  </td>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                </tr>
                <tr>
                  <td/>
                  <td><i>Bruchophagus gibbus</i> (Boheman, 1836)</td>
                  <td>I</td>
                  <td/>
                  <td>UI</td>
                  <td/>
                  <td>European origin</td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Apis mellifera</i> (Linnaeus, 1758)</td>
                  <td>I</td>
                  <td>1900</td>
                  <td>If</td>
                  <td/>
                  <td>Africa; Africa; Australia; Caribbean; Europe &amp; Northern Asia (excluding China); Middle America; North America; Oceania; South America; Southern Asia</td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Urocerus gigas</i> (Linnaeus, 1758)</td>
                  <td>P</td>
                  <td>1984</td>
                  <td>U</td>
                  <td/>
                  <td>Europe, North America</td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Janus piri</i> (Okamoto &amp; Muramatsu, 1925)</td>
                  <td>I</td>
                  <td>1987</td>
                  <td>UIpl</td>
                  <td/>
                  <td>Mainland China (exclude western China), Korean peninsula<a class="xref xref-fn" href="#table-1fn5" data-jats-ref-type="fn" data-jats-rid="table-1fn5"><sup>1</sup></a></td>
                </tr>
                <tr>
                  <td>
                    <b>Lepidoptera</b>
                  </td>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                </tr>
                <tr>
                  <td/>
                  <td><i>Anarsia lineatella</i> (Zeller, 1839)</td>
                  <td>P</td>
                  <td/>
                  <td>UIpl</td>
                  <td>Mediterranean Sea</td>
                  <td/>
                </tr>
                <tr>
                  <td/>
                  <td><i>Cydia pomonella</i> (Linnaeus, 1758)</td>
                  <td>I</td>
                  <td>1950</td>
                  <td>UIpl+ND</td>
                  <td/>
                  <td>Europe<a class="xref xref-fn" href="#table-1fn9" data-jats-ref-type="fn" data-jats-rid="table-1fn9"><sup>5</sup></a></td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Grapholita inopinata</i> (Heinrich, 1928)</td>
                  <td>P</td>
                  <td/>
                  <td>UIpl</td>
                  <td/>
                  <td>Korean Peninsula; Japan; the Russian Far East<a class="xref xref-fn" href="#table-1fn5" data-jats-ref-type="fn" data-jats-rid="table-1fn5"><sup>1</sup></a></td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Carposina sasakii</i> (Matsumura, 1900)</td>
                  <td>P</td>
                  <td/>
                  <td>UIpl</td>
                  <td/>
                  <td>Japan; Korean Peninsula<a class="xref xref-fn" href="#table-1fn9" data-jats-ref-type="fn" data-jats-rid="table-1fn9"><sup>5</sup></a></td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Pieris rapae</i> (Linnaeus, 1758)</td>
                  <td>I</td>
                  <td/>
                  <td>UIpl</td>
                  <td/>
                  <td>North America; Europe; Japan; Oceania<a class="xref xref-fn" href="#table-1fn9" data-jats-ref-type="fn" data-jats-rid="table-1fn9"><sup>5</sup></a></td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Paranthrene tabaniformis</i> (Rottemburg, 1775)</td>
                  <td>I</td>
                  <td>1965</td>
                  <td>UIpl</td>
                  <td/>
                  <td/>
                </tr>
                <tr>
                  <td/>
                  <td><i>Aegeria molybdoceps</i> (Hampson, 1919)</td>
                  <td>I</td>
                  <td>1995</td>
                  <td>UIpl</td>
                  <td/>
                  <td/>
                </tr>
                <tr>
                  <td/>
                  <td><i>Opogona sacchari</i> (Bojer, 1856)</td>
                  <td>E</td>
                  <td>1995</td>
                  <td>UIpl</td>
                  <td/>
                  <td>Sub-Saharan Africa; Mauritius</td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Monema flavescens</i> (Walker, 1855)</td>
                  <td>I</td>
                  <td>2001</td>
                  <td>UIpl</td>
                  <td/>
                  <td>Korea; Japan; the Russian Far East (Amur, Ussuri, Askold); Eastern and central China<a class="xref xref-fn" href="#table-1fn5" data-jats-ref-type="fn" data-jats-rid="table-1fn5"><sup>1</sup></a></td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Acleris fimbriana</i> (Thunberg, 1791)</td>
                  <td>E</td>
                  <td>2008</td>
                  <td>UIpl</td>
                  <td/>
                  <td/>
                </tr>
                <tr>
                  <td>
                    <b>Diptera</b>
                  </td>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                </tr>
                <tr>
                  <td/>
                  <td><i>Liriomyza huidobrensis</i> (Blanchard, 1926)</td>
                  <td>I</td>
                  <td>1998</td>
                  <td>UIpl</td>
                  <td/>
                  <td>California, Utah, Washington, Neotropics, Easter Isl., Hawaii</td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Liriomyza sativae</i> (Blanchard, 1938)</td>
                  <td>I</td>
                  <td>1996</td>
                  <td>UIpl</td>
                  <td/>
                  <td>US, Guam, Hawaii, New Caledonia; Neotropical areas</td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Mayetiola destructor</i> (Say, 1817)</td>
                  <td>E</td>
                  <td>1975</td>
                  <td>UIpl</td>
                  <td/>
                  <td>Europe<a class="xref xref-fn" href="#table-1fn9" data-jats-ref-type="fn" data-jats-rid="table-1fn9"><sup>5</sup></a></td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Carpomya vesuviana</i> (Costa, 1854)</td>
                  <td>E</td>
                  <td>2007</td>
                  <td>UIpl+ND</td>
                  <td>India</td>
                  <td>Italy, Bosnia, Caucasus, Central Asia, Pakistan, India, Thailand</td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Meromyza saltatrix</i> (Linnaeus, 1761)</td>
                  <td>P</td>
                  <td/>
                  <td>UIpl</td>
                  <td>Europe<a class="xref xref-fn" href="#table-1fn9" data-jats-ref-type="fn" data-jats-rid="table-1fn9"><sup>5</sup></a></td>
                  <td>Europe, Russia, Mongolia, China; North America</td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Liriomyza bryoniae</i> (Kaltenbach, 1858)</td>
                  <td>I</td>
                  <td>1998</td>
                  <td>UIpl</td>
                  <td>Germany</td>
                  <td/>
                </tr>
                <tr>
                  <td>
                    <b>Coleoptera</b>
                  </td>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                </tr>
                <tr>
                  <td/>
                  <td><i>Araecerus fasciculatus</i> (DeGeer, 1775)</td>
                  <td>P</td>
                  <td/>
                  <td>U</td>
                  <td>India<a class="xref xref-fn" href="#table-1fn9" data-jats-ref-type="fn" data-jats-rid="table-1fn9"><sup>5</sup></a></td>
                  <td>Worldwide</td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Bruchus pisorum</i> (Linnaeus, 1758)</td>
                  <td>I</td>
                  <td>1965</td>
                  <td>U</td>
                  <td>Mediterranean Sea<a class="xref xref-fn" href="#table-1fn9" data-jats-ref-type="fn" data-jats-rid="table-1fn9"><sup>5</sup></a></td>
                  <td>Canada; US; Europe; Northern Asia</td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Leptinotarsa decemlineata</i> (Say, 1824)</td>
                  <td>I</td>
                  <td>1993</td>
                  <td>UIpl+ND</td>
                  <td>US<a class="xref xref-fn" href="#table-1fn9" data-jats-ref-type="fn" data-jats-rid="table-1fn9"><sup>5</sup></a></td>
                  <td>Canada; Continental US; Europe &amp; Northern Asia</td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Hypera postica</i> (Dejean)</td>
                  <td>I</td>
                  <td/>
                  <td>U</td>
                  <td/>
                  <td>European origin</td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Sitophilus granarius</i> (Csiki, E., 1936)</td>
                  <td>I</td>
                  <td>1954</td>
                  <td>UI</td>
                  <td>Canada, US</td>
                  <td/>
                </tr>
                <tr>
                  <td/>
                  <td><i>Cryptorhynchus lapathi</i> (Dejean)</td>
                  <td>I</td>
                  <td/>
                  <td>UIpl</td>
                  <td>Canada, US</td>
                  <td>Europe, Canada, US and Japan</td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Cosmopolites sordidus</i> (Marshall, G.A.K., 1930)</td>
                  <td>P</td>
                  <td/>
                  <td>U</td>
                  <td>Malaysia and Indonesia</td>
                  <td/>
                </tr>
                <tr>
                  <td/>
                  <td><i>Anthrenus picturatus</i> (Solsky, 1876)</td>
                  <td>P</td>
                  <td/>
                  <td>U</td>
                  <td/>
                  <td>Europe<a class="xref xref-fn" href="#table-1fn9" data-jats-ref-type="fn" data-jats-rid="table-1fn9"><sup>5</sup></a></td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Anthrenus verbasci</i> (Linnaeus, 1767)</td>
                  <td>P</td>
                  <td/>
                  <td>U</td>
                  <td/>
                  <td>Present in most of Europe, in East Palearctic ecozone, in the Near East, in the Nearctic ecozone and in North Africa.</td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Lissorhoptrus oryzophilus</i> (Kuschel, 1952)</td>
                  <td>I</td>
                  <td>2008</td>
                  <td>UIpl</td>
                  <td>American continent</td>
                  <td/>
                </tr>
                <tr>
                  <td/>
                  <td><i>Agrilus mali</i> (Matsumura, 1924)</td>
                  <td>E</td>
                  <td>1993</td>
                  <td>UIpl</td>
                  <td/>
                  <td>Korean Peninsula; Japan<a class="xref xref-fn" href="#table-1fn9" data-jats-ref-type="fn" data-jats-rid="table-1fn9"><sup>5</sup></a></td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Anoplophora glabripennis</i> (Motschulsky, 1854)</td>
                  <td>I</td>
                  <td>1999</td>
                  <td>UIpl</td>
                  <td>Eastern China; Japan; Korea</td>
                  <td/>
                </tr>
                <tr>
                  <td/>
                  <td><i>Monohelea hieroglyphica</i> (Kieffer, 1917)</td>
                  <td>I</td>
                  <td>1998</td>
                  <td>UIpl</td>
                  <td/>
                  <td>Guyana; Brazil; West Indies (Dominica, Trinidad)</td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Potosia brevitarsis</i> (Lewis)</td>
                  <td>I</td>
                  <td>2001</td>
                  <td>UIpl</td>
                  <td/>
                  <td>Northeastern and central China<a class="xref xref-fn" href="#table-1fn10" data-jats-ref-type="fn" data-jats-rid="table-1fn10"><sup>6</sup></a></td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Apriona swainsoni</i> (Hope, 1840)</td>
                  <td>E</td>
                  <td>2003</td>
                  <td>UIpl</td>
                  <td/>
                  <td>South China; India; Lao’s, Vietnam</td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Semanotus bifasciatus</i> (Motschulsky, 1875)</td>
                  <td>E</td>
                  <td>2003</td>
                  <td>UIpl</td>
                  <td/>
                  <td>China; Japan; Mongolia; Russia</td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Chrysobothris succedanea</i> (Saunders)</td>
                  <td>E</td>
                  <td>2008</td>
                  <td>UIpl</td>
                  <td/>
                  <td>Eastern China, Gansu, Ningxia<a class="xref xref-fn" href="#table-1fn10" data-jats-ref-type="fn" data-jats-rid="table-1fn10"><sup>6</sup></a></td>
                </tr>
                <tr>
                  <td>
                    <b>Thysanoptera</b>
                  </td>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                </tr>
                <tr>
                  <td/>
                  <td><i>Frankliniella occidentalis</i> (Pergande, 1895)</td>
                  <td>I</td>
                  <td>2007</td>
                  <td>UIpl</td>
                  <td>Southwestern United States</td>
                  <td>Africa; Africa; Australia; Caribbean; Europe &amp; Northern Asia (excluding China); Middle America; North America; Oceania; South America; Southern Asia</td>
                </tr>
                <tr>
                  <td>
                    <b>Hemiptera</b>
                  </td>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                  <td/>
                </tr>
                <tr>
                  <td/>
                  <td><i>Eulecanium giganteum</i> (Shinji, 1935)</td>
                  <td>I</td>
                  <td>1979</td>
                  <td>UIpl</td>
                  <td/>
                  <td>Russia; China; Japan</td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Phenacoccus solenopsis</i> (Tinsley, 1898)</td>
                  <td>I</td>
                  <td>2010</td>
                  <td>UIpl</td>
                  <td/>
                  <td>Mexico; Dominican Republic; United States of America; Panama; Ecuador; Cuba</td>
                </tr>
                <tr>
                  <td/>
                  <td>
                    <i>Diuraphis noxia</i>
                  </td>
                  <td>I</td>
                  <td>1977</td>
                  <td>UIpl</td>
                  <td/>
                  <td/>
                </tr>
                <tr>
                  <td/>
                  <td><i>Trialeurodes vaporariorum</i> (Westwood, 1856)</td>
                  <td>I</td>
                  <td>1978</td>
                  <td>UIpl</td>
                  <td>Europe</td>
                  <td/>
                </tr>
                <tr>
                  <td/>
                  <td><i>Zyginidia eremita</i> (Zachvatkin, 1953)</td>
                  <td>I</td>
                  <td>1982</td>
                  <td>UIpl</td>
                  <td/>
                  <td/>
                </tr>
                <tr>
                  <td/>
                  <td><i>Aphis gossypii gossypii</i> (Glover, 1877)</td>
                  <td>I</td>
                  <td>1984</td>
                  <td>UIpl</td>
                  <td/>
                  <td>Worldwide</td>
                </tr>
                <tr>
                  <td/>
                  <td>
                    <i>Eriosoma lanigerum</i>
                  </td>
                  <td>E</td>
                  <td>2005</td>
                  <td>UIpl</td>
                  <td/>
                  <td>Originated in eastern North America</td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Aphanostigma piri</i> (Cholodkovsky, 1904)</td>
                  <td>E</td>
                  <td/>
                  <td>UIpl</td>
                  <td/>
                  <td/>
                </tr>
                <tr>
                  <td/>
                  <td><i>Bemisia tabaci</i> (Gennadius, 1889)</td>
                  <td>I</td>
                  <td>1998</td>
                  <td>UIpl</td>
                  <td>India</td>
                  <td/>
                </tr>
                <tr>
                  <td/>
                  <td><i>Pseudaulacaspis pentagona</i> (Targioni Tozzetti, 1886)</td>
                  <td>I</td>
                  <td>1990</td>
                  <td>UIpl</td>
                  <td/>
                  <td>Originated in eastern Asia</td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Parlatoria oleae</i> (Colvée, 1880)</td>
                  <td>I</td>
                  <td>1994</td>
                  <td>UIpl</td>
                  <td/>
                  <td>Egypt, Morocco, Spain, Sicily, Saudi Arabia, Sardinia, Romania, Pakistan, Malta, Lebanon, Kazakhstan, United States of America, Sri Lanka, Portugal, Sudan, Syria, Taiwan, Tajikistan (=Tadzhikistan), Tunisia, Turkey, Turkmenistan, Jordan, United Kingdom, Libya, Uzbekistan, Yugoslavia, Ukraine, Argentina, Mexico, Algeria, Italy, Armenia, Australia, Azerbaijan, Belgium, Bolivia, Brazil, Bulgaria, Canary Islands, Cayman Islands, China, Crete, Iraq, Afghanistan, Cyprus, Israel, Iran, India, Hungary, Germany, Georgia, France, Greece, Ethiopia</td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Cacopsylla chinensis</i> (Yang &amp; Li, 1981)</td>
                  <td>E</td>
                  <td>1997</td>
                  <td>UIpl</td>
                  <td/>
                  <td/>
                </tr>
                <tr>
                  <td/>
                  <td><i>Arboridia apicalis</i> (Nawa, 1913)</td>
                  <td>I</td>
                  <td>1999</td>
                  <td>UIpl</td>
                  <td/>
                  <td/>
                </tr>
                <tr>
                  <td/>
                  <td><i>Nipaecoccus nipae</i> (Maskell, 1893)</td>
                  <td>E</td>
                  <td>2001</td>
                  <td>UIpl</td>
                  <td/>
                  <td>Europe, Asia, Africa, North, Central and South America and Oceania</td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Heliococcus ziziphi</i> (Borchsenius, 1958)</td>
                  <td>I</td>
                  <td>2003</td>
                  <td>UIpl</td>
                  <td/>
                  <td>China</td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Pseudococcus maritimus</i> (Ehrhorn, 1900)</td>
                  <td>E</td>
                  <td>2003</td>
                  <td>UIpl</td>
                  <td/>
                  <td>French Guiana, Poland, United States of America, Mexico, Indonesia, Guatemala, Canada, Brazil, Bermuda, Armenia, Argentina, Chile</td>
                </tr>
                <tr>
                  <td/>
                  <td><i>Batracomorphus pandarus</i> (Knight 1983)</td>
                  <td>E</td>
                  <td>2009</td>
                  <td>UIpl</td>
                  <td>Malaysia (Sabah, Sarawak)</td>
                  <td/>
                </tr>
                <tr>
                  <td/>
                  <td><i>Coccura suwakoensis</i> (Kuwana &amp; Toyoda, 1915)</td>
                  <td>E</td>
                  <td>2011</td>
                  <td>UIpl</td>
                  <td>Japan</td>
                  <td>Russia; Japan; North Korea; China</td>
                </tr>
              </tbody>
            </table></div><div class="object-id article-component-doi">DOI: <a href="https://doi.org/10.7717/peerj.1545/table-1" data-toggle="tooltip" title="Cite this object using this DOI">10.7717/peerj.1545/table-1</a></div>
          <div class="table-wrap-foot">
            <div class="fn" id="table-1fn">
              <p id="p-10">
                <b>Notes:</b>
              </p>
            </div>
            <div class="fn" id="table-1fn1" data-jats-fn-type="other">
              <a class="article-label">a</a>
              <span class="p">Population status: <i>E</i> established, <i>NE</i> non-established, <i>I</i> invasive, <i>P</i> present but no details.</span>
            </div>
            <div class="fn" id="table-1fn2" data-jats-fn-type="other">
              <a class="article-label">b</a>
              <span class="p">First recorded time is the year when a certain alien animal species was recorded or reported for the first time in Xinjiang. Data were extracted from peer-reviewed literatures and local fauna provided in the <a class="xref xref-supplementary-material" href="#supp-5" data-jats-ref-type="supplementary-material" data-jats-rid="supp-5">Supplemental References</a>.</span>
            </div>
            <div class="fn" id="table-1fn3" data-jats-fn-type="other">
              <a class="article-label">c</a>
              <span class="p">Introducing pathway: <i>If</i> introduction for farming, <i>Ipe</i> escaping or released pets, <i>Ia</i> introduction for aquaculture, <i>ND</i> naturally dispersed to Xinjiang after being introduced, <i>UI</i> unintentional introduction, <i>UIa</i> unintentional introductions with aquatic products, <i>UIpl</i> unintentional introductions with plants (such as crops, ornamentals, fruit trees and timber), <i>U</i> unknown pathways.</span>
            </div>
            <div class="fn" id="table-1fn4" data-jats-fn-type="other">
              <a class="article-label">d</a>
              <span class="p">We gave distribution and native range of species if information was available in following databases: Catalogue of Life (<a class="xref xref-bibr" href="http://www.catalogueoflife.org/col" title="Species 2000 &amp; ITIS Catalogue of Life, 18th March 2015" data-jats-ref-type="bibr" data-jats-rid="ref-40">Roskov et al., 2015</a>), IUCN Redlist (<a class="xref xref-bibr" href="http://www.iucnredlist.org" title="The IUCN Red List of Threatened Species" data-jats-ref-type="bibr" data-jats-rid="ref-21">IUCN, 2014</a>), Global Invasive Species Database (<a class="xref xref-bibr" href="http://www.issg.org/database/welcome/" title="Global Invasive Species Database" data-jats-ref-type="bibr" data-jats-rid="ref-22">ISSG, 2014</a>) or Invasive Species Compendium (<a class="xref xref-bibr" href="http://www.cabi.org/isc" title="Invasive Species Compendium" data-jats-ref-type="bibr" data-jats-rid="ref-3">CABI, 2014</a>).</span>
              <span class="p">For those ranges recorded as “China” in global databases, we specified them using:</span>
            </div>
            <div class="fn" id="table-1fn5" data-jats-fn-type="other">
              <a class="article-label">1</a>
              <span class="p">China Animal Scientific Database (<a class="xref xref-bibr" href="http://www.zoology.csdb.cn/page/index.vpage" title="China Animal Scientific Database (in Chinese)" data-jats-ref-type="bibr" data-jats-rid="ref-4">CAS, 2015</a>).</span>
            </div>
            <div class="fn" id="table-1fn6" data-jats-fn-type="other">
              <a class="article-label">2</a>
              <span class="p">A field guide to the birds of China (<a class="xref xref-bibr" href="https://scholar.google.com/scholar_lookup?title=A field guide to the birds of China&amp;author=MacKinnon&amp;publication_year=2001" title="A field guide to the birds of China" data-jats-ref-type="bibr" data-jats-rid="ref-30a">MacKinnon, Philipps &amp; He, 2001</a>).</span>
            </div>
            <div class="fn" id="table-1fn7" data-jats-fn-type="other">
              <a class="article-label">3</a>
              <span class="p">Distribution and zoogeographic division of freshwater fish in China (<a class="xref xref-bibr" href="https://scholar.google.com/scholar_lookup?title=Distribution and zoogeographic division of freshwater fish in China&amp;author=Li&amp;publication_year=1981" title="Distribution and zoogeographic division of freshwater fish in China" data-jats-ref-type="bibr" data-jats-rid="ref-25a">Li, 1981</a>).</span>
            </div>
            <div class="fn" id="table-1fn8" data-jats-fn-type="other">
              <a class="article-label">4</a>
              <span class="p">Fishes of Xinjiang Uygur Autonomous Region, China (<a class="xref xref-bibr" href="https://scholar.google.com/scholar_lookup?title=Fishes of Xinjiang Uygur Autonomous Region, China&amp;author=Guo&amp;publication_year=2012" title="Fishes of Xinjiang Uygur Autonomous Region, China" data-jats-ref-type="bibr" data-jats-rid="ref-13">Guo, Zhang &amp; Cai, 2012b</a>).</span>
            </div>
            <div class="fn" id="table-1fn9" data-jats-fn-type="other">
              <a class="article-label">5</a>
              <span class="p">Database of Invasive Alien Species of China (CMIAS, IPP).</span>
            </div>
            <div class="fn" id="table-1fn10" data-jats-fn-type="other">
              <a class="article-label">6</a>
              <span class="p">China Agriculture Pests Information System (IPP). Above references were listed in the references or in the <a class="xref xref-supplementary-material" href="#supp-5" data-jats-ref-type="supplementary-material" data-jats-rid="supp-5">Supplemental References</a>.</span>
            </div>
          </div>
        </figure>
      </section>
      <section class="sec">
        <h3 class="heading">Distribution of the aliens</h3>
        <p id="p-22">We calculated the number of recorded alien animal species in each of all 15 prefectures in Xinjiang (<a class="xref xref-fig" href="#fig-2" data-jats-ref-type="fig" data-jats-rid="fig-2">Fig. 2</a>). The highest number of alien animal species was recorded in Ili Prefecture (73 species) in the western Tianshan Mountain area, followed by Bayingolin (58 species) which covers almost half of the Tarim Basin, and Urumqi (47 species) in the eastern Tianshan Mountain area. By contrast, fewer alien animal species occurred in the more arid Turpan and Hami prefectures (18 and 21 species, respectively) in the Turpan Basin. Only 7 species was recorded in Kizilsu Prefecture on eastern Pamir Plateau. Records of occurrence location were available for 119 of 128 alien animal species in our list. We used linear regression modelling to explain current distribution of alien animals in Xinjiang. The final model (Adjusted <i>R</i><sup>2</sup> = 0.929, DW = 2.163, <i>F</i> = 57.779, <i>P</i> &lt; 0.0001, model summary in <a class="xref xref-supplementary-material" href="#supp-1" data-jats-ref-type="supplementary-material" data-jats-rid="supp-1">Table S1</a>) included three variables: volume of surface water resources (β = 0.78, t = 9.706, partial correlation coefficient = 0.951, <i>P</i> &lt; 0.0001), GDP (β = 0.729, t = 9.812, partial correlation coefficient = 0.952, <i>P</i> &lt; 0.0001), and the share of transportation output in GDP (β = 0.237, t = 2.964, partial correlation coefficient = 0.684, <i>P</i> &lt; 0.05). Potential variables with poor predictive performance were excluded during the modelling process. No collinearity existed among the variables in the final model (see <a class="xref xref-supplementary-material" href="#supp-2" data-jats-ref-type="supplementary-material" data-jats-rid="supp-2">Table S2</a>).</p>
        <figure class="fig" itemprop="image" itemscope="itemscope" itemtype="https://schema.org/ImageObject" id="fig-2"><div class="image-container"><a href="https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/fig-2-2x.jpg" title="View the full image" class="fresco" data-fresco-caption="Figure 2: Number of recorded alien animal species, volume of surface water (107 tons) and GDP (109 Yuan RMB, equal to 1.61 × 108 USD) of each prefecture of Xinjiang." data-fresco-group="figure" data-fresco-options="fit: 'width', ui: 'outside', thumbnails: false, loop: true, position: true, overflow: true, preload: false"><img class="graphic" src="https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/fig-2-1x.jpg" itemprop="contentUrl" sizes="(min-width: 1200px) 581px, (max-width: 1199px) and (min-width: 980px) 462px, (max-width: 979px) and (min-width: 768px) 347px, (max-width: 767px) calc(100vw - 50px)" srcset="https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/fig-2-2x.jpg 1200w, https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/fig-2-1x.jpg 600w, https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/fig-2-small.jpg 355w" data-image-id="fig-2" alt="Number of recorded alien animal species, volume of surface water (107 tons) and GDP (109 Yuan RMB, equal to 1.61 × 108 USD) of each prefecture of Xinjiang." data-full="https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/fig-2-full.png" data-thumb="https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/fig-2-thumb.jpg" data-original="https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/fig-2.png" data-image-type="figure" data-jats-mimetype="image" data-jats-mime-subtype="png"/></a></div><figcaption itemprop="description">
            <h4 class="heading"><span class="caption-label">Figure 2: </span>Number of recorded alien animal species, volume of surface water (10<sup>7</sup> tons) and GDP (10<sup>9</sup> Yuan RMB, equal to 1.61 × 10<sup>8</sup> USD) of each prefecture of Xinjiang.</h4>
            <span class="p">The sketch map of Xinjiang is drafted by the Xinjiang Bureau of Surveying and Mapping, and was downloaded from the public service website of the Xinjiang Bureau of Surveying, Mapping and Geoinformation at: <a class="uri" href="http://www.xjch.gov.cn/article/bzdt/index.shtml">http://www.xjch.gov.cn/article/bzdt/index.shtml</a> (accessed on December, 2014).</span>
          <div class="figcaption-footer"><div class="article-image-download"><a href="https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/fig-2-full.png" class="btn btn-mini" download="peerj-1545-fig-2.png" itemprop="url"><i class="icon-large icon-picture"> </i> Download full-size image</a></div><div class="object-id article-component-doi">DOI: <a href="https://doi.org/10.7717/peerj.1545/fig-2" data-toggle="tooltip" title="Cite this object using this DOI">10.7717/peerj.1545/fig-2</a></div></div></figcaption></figure>
      </section>
      <section class="sec">
        <h3 class="heading">Temporal trends of aliens</h3>
        <p id="p-24">The temporal trend of alien animal species in Xinjiang was illustrated in <a class="xref xref-fig" href="#fig-3" data-jats-ref-type="fig" data-jats-rid="fig-3">Fig. 3</a>. From 1951 to 2000, the number of new records per year showed a gradual increase. The highest number of new alien species was recorded from 1991 to 2000, which was mainly attributed to growth of introduced fishes and arthropods (11 and 14 species, respectively). After 2001, introduction of alien animal species in Xinjiang slowed down slightly: new records of alien species dropped from 3 species per year during 1990s to ∼2.5 species per year from 2001 to 2014, most of which were insects. Almost half of alien animals introduced from 1991 to 2000 have become “invasive,” accounting for 44% of the total invasive animal species in the past 64 years. Comparatively, species introduced after 2001 showed less proportion of both “established” and “invasive” (<a class="xref xref-fig" href="#fig-4" data-jats-ref-type="fig" data-jats-rid="fig-4">Fig. 4</a>). Temporal correlation was established between the share of transportation output in GDP (<i>r</i> = 0.886, <i>P</i> &lt; 0.05), the share of imports in GDP (<i>r</i> = 0.821, <i>P</i> &lt; 0.05) and number of new records of alien animal species per year from 1981 to 2010 (<a class="xref xref-supplementary-material" href="#supp-3" data-jats-ref-type="supplementary-material" data-jats-rid="supp-3">Table S3</a>).</p>
        <figure class="fig" itemprop="image" itemscope="itemscope" itemtype="https://schema.org/ImageObject" id="fig-3"><div class="image-container"><a href="https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/fig-3-2x.jpg" title="View the full image" class="fresco" data-fresco-caption="Figure 3: The temporal trend of alien animal species in the past 64 years." data-fresco-group="figure" data-fresco-options="fit: 'width', ui: 'outside', thumbnails: false, loop: true, position: true, overflow: true, preload: false"><img class="graphic" src="https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/fig-3-1x.jpg" itemprop="contentUrl" sizes="(min-width: 1200px) 581px, (max-width: 1199px) and (min-width: 980px) 462px, (max-width: 979px) and (min-width: 768px) 347px, (max-width: 767px) calc(100vw - 50px)" srcset="https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/fig-3-2x.jpg 1200w, https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/fig-3-1x.jpg 600w, https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/fig-3-small.jpg 355w" data-image-id="fig-3" alt="The temporal trend of alien animal species in the past 64 years." data-full="https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/fig-3-full.png" data-thumb="https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/fig-3-thumb.jpg" data-original="https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/fig-3.png" data-image-type="figure" data-jats-mimetype="image" data-jats-mime-subtype="png"/></a></div><figcaption itemprop="description">
            <h4 class="heading"><span class="caption-label">Figure 3: </span>The temporal trend of alien animal species in the past 64 years.</h4>
            <span class="p">We considered the first recorded time of each species to graph the column figure. Species without such data were excluded.</span>
          <div class="figcaption-footer"><div class="article-image-download"><a href="https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/fig-3-full.png" class="btn btn-mini" download="peerj-1545-fig-3.png" itemprop="url"><i class="icon-large icon-picture"> </i> Download full-size image</a></div><div class="object-id article-component-doi">DOI: <a href="https://doi.org/10.7717/peerj.1545/fig-3" data-toggle="tooltip" title="Cite this object using this DOI">10.7717/peerj.1545/fig-3</a></div></div></figcaption></figure>
        <figure class="fig" itemprop="image" itemscope="itemscope" itemtype="https://schema.org/ImageObject" id="fig-4"><div class="image-container"><a href="https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/fig-4-2x.jpg" title="View the full image" class="fresco" data-fresco-caption="Figure 4: Population status of alien animal species detected in different temporal periods of the past 64 years." data-fresco-group="figure" data-fresco-options="fit: 'width', ui: 'outside', thumbnails: false, loop: true, position: true, overflow: true, preload: false"><img class="graphic" src="https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/fig-4-1x.jpg" itemprop="contentUrl" sizes="(min-width: 1200px) 581px, (max-width: 1199px) and (min-width: 980px) 462px, (max-width: 979px) and (min-width: 768px) 347px, (max-width: 767px) calc(100vw - 50px)" srcset="https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/fig-4-2x.jpg 1200w, https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/fig-4-1x.jpg 600w, https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/fig-4-small.jpg 355w" data-image-id="fig-4" alt="Population status of alien animal species detected in different temporal periods of the past 64 years." data-full="https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/fig-4-full.png" data-thumb="https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/fig-4-thumb.jpg" data-original="https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/fig-4.png" data-image-type="figure" data-jats-mimetype="image" data-jats-mime-subtype="png"/></a></div><figcaption itemprop="description">
            <h4 class="heading"><span class="caption-label">Figure 4: </span>Population status of alien animal species detected in different temporal periods of the past 64 years.</h4>
            <span class="p">The first recorded time of each species was considered to graph the column figure. Species without such data were excluded.</span>
          <div class="figcaption-footer"><div class="article-image-download"><a href="https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/fig-4-full.png" class="btn btn-mini" download="peerj-1545-fig-4.png" itemprop="url"><i class="icon-large icon-picture"> </i> Download full-size image</a></div><div class="object-id article-component-doi">DOI: <a href="https://doi.org/10.7717/peerj.1545/fig-4" data-toggle="tooltip" title="Cite this object using this DOI">10.7717/peerj.1545/fig-4</a></div></div></figcaption></figure>
      </section>
    </section>
    <section class="sec" id="discussion">
      <h2 class="heading">Discussion</h2>
      <section class="sec">
        <h3 class="heading">Economy, environment and invasion process in Xinjiang</h3>
        <p id="p-27">Human plays a key role in biological invasions at both regional and global scales (<a class="xref xref-bibr" href="https://doi.org/10.1007%2Fs10530-008-9216-3" title="Invasive alien plants in China: diversity and ecological insights" data-jats-ref-type="bibr" data-jats-rid="ref-48">Weber, Sun &amp; Li, 2008</a>; <a class="xref xref-bibr" href="https://doi.org/10.1111%2Fj.1472-4642.2009.00633.x" title="Global indicators of biological invasion: species numbers, biodiversity impact and policy responses" data-jats-ref-type="bibr" data-jats-rid="ref-31">McGeoch et al., 2010</a>; <a class="xref xref-bibr" href="https://doi.org/10.1073%2Fpnas.1002314107" title="Disentangling the role of environmental and human pressures on biological invasions across Europe" data-jats-ref-type="bibr" data-jats-rid="ref-37">Pyšek et al., 2010</a>). Among the human activities, the ones involving economic development and trade, often diversify introducing pathways (<a class="xref xref-bibr" href="https://doi.org/10.1111%2Fj.1365-2664.2007.01442.x" title="Grasping at the routes of biological invasions: a framework for integrating pathways into policy" data-jats-ref-type="bibr" data-jats-rid="ref-19">Hulme et al., 2008</a>), increase propagule pressure and bring disturbance to endemic biota (<a class="xref xref-bibr" href="https://scholar.google.com/scholar_lookup?title=Disturbance and biological invasions: direct effects and feedbacks&amp;author=D’antonio&amp;publication_year=1999" title="Disturbance and biological invasions: direct effects and feedbacks" data-jats-ref-type="bibr" data-jats-rid="ref-8">D’antonio et al., 1999</a>; <a class="xref xref-bibr" href="https://doi.org/10.1016%2Fj.tree.2005.02.004" title="The role of propagule pressure in explaining species invasions" data-jats-ref-type="bibr" data-jats-rid="ref-28">Lockwood, Cassey &amp; Blackburn, 2005</a>), and consequently boost the scale of alien species invasions to a significant extent. This paradigm was proved to be the case of Xinjiang. Using GDP as the surrogate of economic development status, we found that the number of alien animal species of each prefecture was largely explained by GDP rather than the total area. Features of the recipient environment also act on alien species invasion through influencing the survival and reproduction phases in alien species’ life history (<a class="xref xref-bibr" href="https://scholar.google.com/scholar_lookup?title=The role of propagule pressure in biological invasions&amp;author=Simberloff&amp;publication_year=2009" title="The role of propagule pressure in biological invasions" data-jats-ref-type="bibr" data-jats-rid="ref-41a">Simberloff, 2009</a>). For alien animal species arrived in arid Xinjiang, water resource is the other contributing factor of their distribution pattern. Many alien animals were recorded at locations situated near water sources, such as oases, rivers and cannels. Oases can serve as both harbours and dispersal corridors of alien animals. Up to now, most of extant oases in Xinjiang have been transformed to artificially irrigated mono-crop plantations. Such simple structured agroforestry biome provided empty niches for opportunistic alien species. Invasion of the silverleaf whitefly (<i>Bemisia tabaci</i>), which was detected in Xinjiang for the first time in 1998, was closely related to oasis agriculture mentioned above. Hitchhiking transported plantlets, pioneering populations of silverleaf whitefly settled in vegetable greenhouses in Urumqi and Turpan cities. They used greenhouses as refuges in cold winters, and spread to neighboring farmlands when greenhouse covers were removed in the following spring. Stepping on the connected agriculture oases and facilitated by commodities circulation, it expanded the distribution range to southern Tarim Basin in 2011 (<a class="xref xref-bibr" href="https://scholar.google.com/scholar_lookup?title=The status and trend of invasive alien species in agriculture and forest in Xinjiang, China and relevant countermeasures&amp;author=Guo&amp;publication_year=2012" title="The status and trend of invasive alien species in agriculture and forest in Xinjiang, China and relevant countermeasures" data-jats-ref-type="bibr" data-jats-rid="ref-12">Guo et al., 2012a</a>, <a class="xref xref-fig" href="#fig-5" data-jats-ref-type="fig" data-jats-rid="fig-5">Fig. 5A</a>). Besides oases, rivers, cannels and inland lakes facilitated invasion of alien fishes and riverain species (such as muskrat). Early in the 20<sup>th</sup> century, many fish species of economic value were introduced into Balkhash Lake in Kazakhstan from the other Asian water systems such as the Aral Sea and Caspian Sea. Eight of these species (e.g. <i>Sander lucioperca</i>, <i>Leuciscus baicalensis</i>, and <i>Abramis brama orientlis,</i> see in <a class="xref xref-table" href="#table-1" data-jats-ref-type="table" data-jats-rid="table-1">Table 1</a>) spread along the Ili River and drove endemic <i>Racoma argentatus</i> and <i>R. pseudaksaiensis</i> to extinction in the early 1990s (<a class="xref xref-bibr" href="https://scholar.google.com/scholar_lookup?title=Fishes of River Ili&amp;author=Ren&amp;publication_year=1998" title="Fishes of River Ili" data-jats-ref-type="bibr" data-jats-rid="ref-38">Ren, 1998</a>). Transportation also contributed to the distribution of alien animal species in Xinjiang. However, its influence was much less significant than GDP and water resources, since areas with developed transportation may be lacking of enough suitable habitats, such as extremely arid prefectures like Turpan and Hami where we only found 18 and 21 alien species.</p>
        <figure class="fig" itemprop="image" itemscope="itemscope" itemtype="https://schema.org/ImageObject" id="fig-5"><div class="image-container"><a href="https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/fig-5-2x.jpg" title="View the full image" class="fresco" data-fresco-caption="Figure 5: (A) Dispersal of silverleaf whitefly (Bemisia tabaci) in Xinjiang and (B) Dispersal of brown rat (Rattus norvegicus) in Xinjiang." data-fresco-group="figure" data-fresco-options="fit: 'width', ui: 'outside', thumbnails: false, loop: true, position: true, overflow: true, preload: false"><img class="graphic" src="https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/fig-5-1x.jpg" itemprop="contentUrl" sizes="(min-width: 1200px) 581px, (max-width: 1199px) and (min-width: 980px) 462px, (max-width: 979px) and (min-width: 768px) 347px, (max-width: 767px) calc(100vw - 50px)" srcset="https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/fig-5-2x.jpg 1200w, https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/fig-5-1x.jpg 600w, https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/fig-5-small.jpg 355w" data-image-id="fig-5" alt="(A) Dispersal of silverleaf whitefly (Bemisia tabaci) in Xinjiang and (B) Dispersal of brown rat (Rattus norvegicus) in Xinjiang." data-full="https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/fig-5-full.png" data-thumb="https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/fig-5-thumb.jpg" data-original="https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/fig-5.png" data-image-type="figure" data-jats-mimetype="image" data-jats-mime-subtype="png"/></a></div><figcaption itemprop="description">
            <h4 class="heading"><span class="caption-label">Figure 5: </span>(A) Dispersal of silverleaf whitefly (<i>Bemisia tabaci</i>) in Xinjiang and (B) Dispersal of brown rat (<i>Rattus norvegicus</i>) in Xinjiang.</h4>
            <span class="p">Figure 5A was plotted according to <a class="xref xref-bibr" href="https://scholar.google.com/scholar_lookup?title=The status and trend of invasive alien species in agriculture and forest in Xinjiang, China and relevant countermeasures&amp;author=Guo&amp;publication_year=2012" title="The status and trend of invasive alien species in agriculture and forest in Xinjiang, China and relevant countermeasures" data-jats-ref-type="bibr" data-jats-rid="ref-12">Guo et al. (2012a)</a> and 5B was plotted according to <a class="xref xref-bibr" href="https://scholar.google.com/scholar_lookup?title=Spreading again along with the railway of Rattus norvegicus and its regulatiag methods in Xinjiang&amp;author=Zhang&amp;publication_year=1997" title="Spreading again along with the railway of Rattus norvegicus and its regulatiag methods in Xinjiang" data-jats-ref-type="bibr" data-jats-rid="ref-55">Zhang, Tao &amp; Mahmut (1997)</a>.</span>
          <div class="figcaption-footer"><div class="article-image-download"><a href="https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/fig-5-full.png" class="btn btn-mini" download="peerj-1545-fig-5.png" itemprop="url"><i class="icon-large icon-picture"> </i> Download full-size image</a></div><div class="object-id article-component-doi">DOI: <a href="https://doi.org/10.7717/peerj.1545/fig-5" data-toggle="tooltip" title="Cite this object using this DOI">10.7717/peerj.1545/fig-5</a></div></div></figcaption></figure>
        <p id="p-29">The facts above indicated that distribution of alien animal species in the arid Xinjiang were jointly influenced by the level of economic development and the environmental suitability, which could be demonstrated by top-three hotspots of alien animals. Ili Prefecture, the first-rank hotspot of alien animal species, is a large oasis supplied with ample water resources from the Ili River. This area is characterized by flourishing economic activities such as stockbreeding, fruit industry, aquaculture and agriculture, which indicates a relative high propagule pressure; favourable natural conditions (e.g. humid and warm climate, lush forest and grassland) also increases the probability of successful establishment and reproduction of aliens. Our study suggested that Bayingolin Prefecture held the second highest number of alien animal species. By contrast to Ili, Bayingolin is largely covered by desert. Most of alien species in Bayingolin were recorded in the only oasis Kolra and the Bosten Lake. Kolra is a highly developed agricultural area with functions of important economic centre and transportation hub of southern Xinjiang; Bosten Lake is the largest aquaculture farm where 25 species of invasive fish, the highest among the water bodies in Xinjiang, were recorded (<a class="xref xref-bibr" href="https://scholar.google.com/scholar_lookup?title=The relationship between the disappearence of Calanoida population and the introduction of Hypomesus olidus in Bosten Lake&amp;author=Lai&amp;publication_year=2009" title="The relationship between the disappearence of Calanoida population and the introduction of Hypomesus olidus in Bosten Lake" data-jats-ref-type="bibr" data-jats-rid="ref-25">Lai, 2009</a>; <a class="xref xref-bibr" href="https://scholar.google.com/scholar_lookup?title=Mechanism of biological invasions in Bosten Lake, Xinjiang&amp;author=Peng&amp;publication_year=2009" title="Mechanism of biological invasions in Bosten Lake, Xinjiang" data-jats-ref-type="bibr" data-jats-rid="ref-35">Peng et al., 2009</a>). These facts thus jointly resulted in a great number of alien species in Bayingolin. Urumqi was found to be another hotspot of biological invasion with the third highest number of alien animals (47 species). This may be largely attributed to the fact that Urumqi is the most economically developed area in Xinjiang, and functions as the largest port of entry in the region with huge volume of foreign trade and highly developed transportation which are well-known drivers of alien species introductions (<a class="xref xref-bibr" href="https://scholar.google.com/scholar_lookup?title=Biological invasions in Europe: drivers, pressures, states, impacts and responses&amp;author=Hulme&amp;publication_year=2007" title="Biological invasions in Europe: drivers, pressures, states, impacts and responses" data-jats-ref-type="bibr" data-jats-rid="ref-18">Hulme, 2007</a>).</p>
      </section>
      <section class="sec">
        <h3 class="heading">The role of transportation and trade in the invasion process</h3>
        <p id="p-30">The first record of alien animal species in Xinjiang dates back to 1900s, which was the <i>Apis mellifera</i> introduced for local honeybee industry (<a class="xref xref-bibr" href="https://scholar.google.com/scholar_lookup?title=Natural geographical district of honeybee in China&amp;author=He&amp;publication_year=1999" title="Natural geographical district of honeybee in China" data-jats-ref-type="bibr" data-jats-rid="ref-15">He et al., 1999</a>). In the 1950s, human mediated introductions of alien animal species started to increase with flourishing domestication of animals of economic values. The obvious growth of alien animals appeared after 1980 (<a class="xref xref-fig" href="#fig-3" data-jats-ref-type="fig" data-jats-rid="fig-3">Fig. 3</a>) along with the increasing traffic between Xinjiang and the world, owing to industrial and economic development facilitated by the “Reform and Opening-up Policy” implemented by Chinese government in 1978. For example, introduction of alien fishes in Xinjiang began with the national-wide propagating of Asian carps in early 1960s, which was of small scale because of limited transportation conditions and breeding facilities. However, an apprearent increase was observed in both the number of species and number of individuals released into main waterbodies of Xinjiang after late 1980s (<a class="xref xref-bibr" href="https://scholar.google.com/scholar_lookup?title=Fishes of Xinjiang Uygur Autonomous Region, China&amp;author=Guo&amp;publication_year=2012" title="Fishes of Xinjiang Uygur Autonomous Region, China" data-jats-ref-type="bibr" data-jats-rid="ref-13">Guo, Zhang &amp; Cai, 2012b</a>). Decades of introductions homogenized most of aboriginal fish fauna to a mixed European-Asian one (<a class="xref xref-bibr" href="https://scholar.google.com/scholar_lookup?title=The changes of fishes fauna and protections of aboriginal fishes in the Tarim River&amp;author=Wang&amp;publication_year=1995" title="The changes of fishes fauna and protections of aboriginal fishes in the Tarim River" data-jats-ref-type="bibr" data-jats-rid="ref-47">Wang, 1995</a>; <a class="xref xref-bibr" href="https://scholar.google.com/scholar_lookup?title=Fishes of River Ili&amp;author=Ren&amp;publication_year=1998" title="Fishes of River Ili" data-jats-ref-type="bibr" data-jats-rid="ref-38">Ren, 1998</a>; <a class="xref xref-bibr" href="https://scholar.google.com/scholar_lookup?title=Fauna composition and distribution of aboriginal fish in the Tarim River of Xinjiang Uygur Autonomous Region&amp;author=Ma&amp;publication_year=2009" title="Fauna composition and distribution of aboriginal fish in the Tarim River of Xinjiang Uygur Autonomous Region" data-jats-ref-type="bibr" data-jats-rid="ref-30">Ma et al., 2009</a>). The Tarim is a closed inland river where fish fauna was historically composed of central Asian alpine species. For the development of local fishery, several alien fishes of economic values were repeatedly introduced to the Tarim River from east and south China in the latest half of 20<sup>th</sup> century. Goldfishes (<i>Carassius auratus</i>), Wuchang breams (<i>Megalobrama amblycephala</i>) and Asian carps, outcompeted endemic species in resource utilization, and became dominant species in local fish communities. Fish invasion in Tarim River led to serious decline in populations of endemic fish, such as <i>Aspiorhynchus laticeps</i> and <i>Schizothor axbiddulphi</i> (<a class="xref xref-bibr" href="https://scholar.google.com/scholar_lookup?title=The changes of fishes fauna and protections of aboriginal fishes in the Tarim River&amp;author=Wang&amp;publication_year=1995" title="The changes of fishes fauna and protections of aboriginal fishes in the Tarim River" data-jats-ref-type="bibr" data-jats-rid="ref-47">Wang, 1995</a>; <a class="xref xref-bibr" href="https://scholar.google.com/scholar_lookup?title=Fauna composition and distribution of aboriginal fish in the Tarim River of Xinjiang Uygur Autonomous Region&amp;author=Ma&amp;publication_year=2009" title="Fauna composition and distribution of aboriginal fish in the Tarim River of Xinjiang Uygur Autonomous Region" data-jats-ref-type="bibr" data-jats-rid="ref-30">Ma et al., 2009</a>).</p>
        <p id="p-31">Developed transportation is directly associated with high volume of domestic and international trade, which is considered to be a key indicator for aliens entry (<a class="xref xref-bibr" href="http://archives.eppo.org/EPPOStandards/PM5_PRA/PRA_scheme_2007.doc" title="Guidelines on Pest Risk Analysis: Decision-support Scheme for Quarantine Pests PM5/3(3)" data-jats-ref-type="bibr" data-jats-rid="ref-10">EPPO, 2007</a>). During the 1990s, transportation of Xinjiang experienced a remarkable boom illustrated in <a class="xref xref-fig" href="#fig-6" data-jats-ref-type="fig" data-jats-rid="fig-6">Fig. 6</a>. Assisted by improved transportation conditions, a large number of plantlets were repeatedly introduced into Xinjiang for expanding local fruit industry (<a class="xref xref-bibr" href="https://scholar.google.com/scholar_lookup?title=Analysis of the production and its development of fruit trees in Xinjiang&amp;author=Bi&amp;publication_year=2002" title="Analysis of the production and its development of fruit trees in Xinjiang" data-jats-ref-type="bibr" data-jats-rid="ref-1">Bi, Liao &amp; Li, 2002</a>; <a class="xref xref-bibr" href="https://scholar.google.com/scholar_lookup?title=Analysis of the production and its development of fruit trees in Xinjiang&amp;author=Bi&amp;publication_year=2009" title="Analysis of the production and its development of fruit trees in Xinjiang" data-jats-ref-type="bibr" data-jats-rid="ref-1a">Bi, Liao &amp; Li, 2009</a>). Together with the plantlets, alien arthropods hitchhiked to Xinjiang, which accounted for nearly 60% of the total alien animals recorded during the period (<a class="xref xref-fig" href="#fig-3" data-jats-ref-type="fig" data-jats-rid="fig-3">Fig. 3</a>). In addition, along the extending transport networks, alien animals may spread widely resulting from transit of goods (<a class="xref xref-bibr" href="https://doi.org/10.1111%2Fj.1365-2664.2007.01442.x" title="Grasping at the routes of biological invasions: a framework for integrating pathways into policy" data-jats-ref-type="bibr" data-jats-rid="ref-19">Hulme et al. 2008</a>). Successful establishment of the brown rat (<i>Rattus norvegicus</i>) was a typical case of mammal invasion facilitated by transportation development. The brown rat was first detected on a train from Beijing to Urumqi in 1975, and successively dispersed to the Western Tianshan Mountains, then to the Juggar Basin and the Tarim Basin along with extending railways in Xinjiang (<a class="xref xref-bibr" href="https://scholar.google.com/scholar_lookup?title=Spreading again along with the railway of Rattus norvegicus and its regulatiag methods in Xinjiang&amp;author=Zhang&amp;publication_year=1997" title="Spreading again along with the railway of Rattus norvegicus and its regulatiag methods in Xinjiang" data-jats-ref-type="bibr" data-jats-rid="ref-55">Zhang, Tao &amp; Mahmut, 1997</a>). In the late 1990s, brown rats naturalized in almost the whole Xinjiang region (except Kizilsu), and growing age structure was observed in most of its populations (<a class="xref xref-bibr" href="https://scholar.google.com/scholar_lookup?title=Spreading again along with the railway of Rattus norvegicus and its regulatiag methods in Xinjiang&amp;author=Zhang&amp;publication_year=1997" title="Spreading again along with the railway of Rattus norvegicus and its regulatiag methods in Xinjiang" data-jats-ref-type="bibr" data-jats-rid="ref-55">Zhang, Tao &amp; Mahmut, 1997</a>, <a class="xref xref-fig" href="#fig-5" data-jats-ref-type="fig" data-jats-rid="fig-5">Fig. 5B</a>).</p>
        <figure class="fig" itemprop="image" itemscope="itemscope" itemtype="https://schema.org/ImageObject" id="fig-6"><div class="image-container"><a href="https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/fig-6-2x.jpg" title="View the full image" class="fresco" data-fresco-caption="Figure 6: Trends of alien animal introduction and GDP, transportation development, and foreign trade." data-fresco-group="figure" data-fresco-options="fit: 'width', ui: 'outside', thumbnails: false, loop: true, position: true, overflow: true, preload: false"><img class="graphic" src="https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/fig-6-1x.jpg" itemprop="contentUrl" sizes="(min-width: 1200px) 581px, (max-width: 1199px) and (min-width: 980px) 462px, (max-width: 979px) and (min-width: 768px) 347px, (max-width: 767px) calc(100vw - 50px)" srcset="https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/fig-6-2x.jpg 1200w, https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/fig-6-1x.jpg 600w, https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/fig-6-small.jpg 355w" data-image-id="fig-6" alt="Trends of alien animal introduction and GDP, transportation development, and foreign trade." data-full="https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/fig-6-full.png" data-thumb="https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/fig-6-thumb.jpg" data-original="https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/fig-6.png" data-image-type="figure" data-jats-mimetype="image" data-jats-mime-subtype="png"/></a></div><figcaption itemprop="description">
            <h4 class="heading"><span class="caption-label">Figure 6: </span>Trends of alien animal introduction and GDP, transportation development, and foreign trade.</h4>
            <span class="p">The x-axis begins with 1981 as systematic statistics in Xinjiang did not start until 1978.</span>
          <div class="figcaption-footer"><div class="article-image-download"><a href="https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/fig-6-full.png" class="btn btn-mini" download="peerj-1545-fig-6.png" itemprop="url"><i class="icon-large icon-picture"> </i> Download full-size image</a></div><div class="object-id article-component-doi">DOI: <a href="https://doi.org/10.7717/peerj.1545/fig-6" data-toggle="tooltip" title="Cite this object using this DOI">10.7717/peerj.1545/fig-6</a></div></div></figcaption></figure>
        <p id="p-33">Besides transportation, increasing international trade from 1986 to 2005 (<a class="xref xref-fig" href="#fig-6" data-jats-ref-type="fig" data-jats-rid="fig-6">Fig. 6</a>) is another factor correlated with temporal variation of alien animal introduction. In Xinjiang, 17 cross-border trade ports have been opened since 1973 (11 of them opened after 1990) along 5, 600km-long international boundary of the region. Opening air and land ports has boosted commodity exchange between Xinjiang and the other countries, which indicated the growth of likely vectors of alien species. The pace of transportation and trade development slightly slowed down in the latest decade. Meanwhile, severe ecological and economic impacts of invasive species (<a class="xref xref-bibr" href="https://scholar.google.com/scholar_lookup?title=The status and trend of invasive alien species in agriculture and forest in Xinjiang, China and relevant countermeasures&amp;author=Guo&amp;publication_year=2012" title="The status and trend of invasive alien species in agriculture and forest in Xinjiang, China and relevant countermeasures" data-jats-ref-type="bibr" data-jats-rid="ref-12">Guo et al., 2012a</a>; <a class="xref xref-bibr" href="https://scholar.google.com/scholar_lookup?title=Invasion of Colorado potato beetle, Leptinotarsa decemlineata, in China: dispersal, occurrence, and economic impact&amp;author=Liu&amp;publication_year=2012" title="Invasion of Colorado potato beetle, Leptinotarsa decemlineata, in China: dispersal, occurrence, and economic impact" data-jats-ref-type="bibr" data-jats-rid="ref-26">Liu, Li &amp; Zhang, 2012</a>; <a class="xref xref-bibr" href="https://scholar.google.com/scholar_lookup?title=Fish community successions in Lake Ulungur: A case of fish invasions in fragile oasis&amp;author=Tang&amp;publication_year=2012" title="Fish community successions in Lake Ulungur: A case of fish invasions in fragile oasis" data-jats-ref-type="bibr" data-jats-rid="ref-45">Tang, Brown &amp; Karjan, 2012</a>) have stimulated a series of fortified prohibitive measures, such as veterinary quarantine and pest controls (<a class="xref xref-bibr" href="https://scholar.google.com/scholar_lookup?title=Analysis on the intercepted situation of the entry plant pests and the quarantine and supervisory measures in Xinjiang&amp;author=Xue&amp;publication_year=2004" title="Analysis on the intercepted situation of the entry plant pests and the quarantine and supervisory measures in Xinjiang" data-jats-ref-type="bibr" data-jats-rid="ref-53">Xue, Fan &amp; Zhang, 2004</a>). According to the reports from <a class="xref xref-bibr" href="https://scholar.google.com/scholar_lookup?title=2013 Yearbook of Xinjiang Entry-exit Inspection and Quarantine Bureau&amp;author=&amp;publication_year=2014" title="2013 Yearbook of Xinjiang Entry-exit Inspection and Quarantine Bureau" data-jats-ref-type="bibr" data-jats-rid="ref-51">Xinjiang Entry-exit Inspection and Quarantine Bureau (2014)</a>, from 2000 to 2010, the number of alien animal species (or genera) intercepted in imported plants, merchandises and luggage increased from 22 to 50 species (or genera) per year, accumulating to over 68 species (or genera) in total. All above reined the fast pace of alien introduction but did not change the situation significantly. In addition, the latest status was more likely to be underestimated, because many of the newly arrived animals were at early stages of invasion process and therefore hard to detect within a relatively short time span.</p>
      </section>
      <section class="sec">
        <h3 class="heading">Gaps in knowledge</h3>
        <p id="p-34">By comparing the number of literatures for data extracting among taxa, we found an evident majority of specific studies on alien insects. In contrast, less studies on alien fishes, much less on alien mammals and birds were found: for 91 selected literatures, 63% focused on insects, 20% on fishes, only 4% on mammals and 3% on birds (<a class="xref xref-fig" href="#fig-7" data-jats-ref-type="fig" data-jats-rid="fig-7">Fig. 7A</a>). Impact is the major factor of a species being chosen as a subject of study (<a class="xref xref-bibr" href="https://doi.org/10.1016%2Fj.tree.2008.02.002" title="Geographical and taxonomic biases in invasion ecology" data-jats-ref-type="bibr" data-jats-rid="ref-36">Pyšek et al., 2008</a>). As to Xinjiang, alien insects, especially pests of agriculture or fruit industry, are more likely to cause seriously economic loss in a relatively short period than other taxa. Consequently, the local government is willing to invest more effort to studies on such species for the sake of mitigating those economic impacts. Unequal financial support and resource distribution largely explained the bias in research intensity of different taxa. During the process of data mining, we were able to access an inventory of invasive arthropod pests in Xinjiang by retrieving peer-reviewed journals, and also gathered information on invasive insects covering aspects of invasion mechanisms, risk assessment, management and eradication from both English and Chinese literatures. However, limited knowledge was available on less influential (or harmful) taxa. Information on alien birds and reptiles were the scarcest; we did not find any specific reports on these taxa. As for alien mammals and fishes, we found case-specific studies focused on few species threatening agricultural production or human health, such as brown rats (<a class="xref xref-bibr" href="https://scholar.google.com/scholar_lookup?title=Spreading again along with the railway of Rattus norvegicus and its regulatiag methods in Xinjiang&amp;author=Zhang&amp;publication_year=1997" title="Spreading again along with the railway of Rattus norvegicus and its regulatiag methods in Xinjiang" data-jats-ref-type="bibr" data-jats-rid="ref-55">Zhang, Tao &amp; Mahmut, 1997</a>) and pond smelts (<i>Hypomesus olidus</i>) (<a class="xref xref-bibr" href="https://scholar.google.com/scholar_lookup?title=The relationship between the disappearence of Calanoida population and the introduction of Hypomesus olidus in Bosten Lake&amp;author=Lai&amp;publication_year=2009" title="The relationship between the disappearence of Calanoida population and the introduction of Hypomesus olidus in Bosten Lake" data-jats-ref-type="bibr" data-jats-rid="ref-25">Lai, 2009</a>). Besides taxonomic bias in research on recorded aliens, we found that research on this field in Xinjiang apparently lagged behind. 75% of the total 91 literatures were published after 2000, but only 17 papers related to alien animal species were published during 1990s when the number of new records of aliens reached the peak (<a class="xref xref-fig" href="#fig-7" data-jats-ref-type="fig" data-jats-rid="fig-7">Fig. 7B</a>). It also showed that recent studies focused more on later stages of invasion process such as management and eradication rather than initial prevention stage (see <a class="xref xref-supplementary-material" href="#supp-5" data-jats-ref-type="supplementary-material" data-jats-rid="supp-5">Supplemental Reference</a>), since scientific research on biological invasions in Xinjiang was strongly directed by the needs of reducing losses caused by alien species.</p>
        <figure class="fig" itemprop="image" itemscope="itemscope" itemtype="https://schema.org/ImageObject" id="fig-7"><div class="image-container"><a href="https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/fig-7-2x.jpg" title="View the full image" class="fresco" data-fresco-caption="Figure 7: " data-fresco-group="figure" data-fresco-options="fit: 'width', ui: 'outside', thumbnails: false, loop: true, position: true, overflow: true, preload: false"><img class="graphic" src="https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/fig-7-1x.jpg" itemprop="contentUrl" sizes="(min-width: 1200px) 581px, (max-width: 1199px) and (min-width: 980px) 462px, (max-width: 979px) and (min-width: 768px) 347px, (max-width: 767px) calc(100vw - 50px)" srcset="https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/fig-7-2x.jpg 1200w, https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/fig-7-1x.jpg 600w, https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/fig-7-small.jpg 355w" data-image-id="fig-7" alt="" data-full="https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/fig-7-full.png" data-thumb="https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/fig-7-thumb.jpg" data-original="https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/fig-7.png" data-image-type="figure" data-jats-mimetype="image" data-jats-mime-subtype="png"/></a></div><figcaption itemprop="description"><span class="caption-label">Figure 7: </span>
            <span class="p">(A) Taxonomic structure of case studies on animal invasions in Xinjiang and (B) Trend of the number of publications on animal invasions in Xinjiang during 1950 to 2014.</span>
          <div class="figcaption-footer"><div class="article-image-download"><a href="https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/fig-7-full.png" class="btn btn-mini" download="peerj-1545-fig-7.png" itemprop="url"><i class="icon-large icon-picture"> </i> Download full-size image</a></div><div class="object-id article-component-doi">DOI: <a href="https://doi.org/10.7717/peerj.1545/fig-7" data-toggle="tooltip" title="Cite this object using this DOI">10.7717/peerj.1545/fig-7</a></div></div></figcaption></figure>
        <p id="p-36">Through the process of information gathering and scrutiny, we found that documentation of alien animals in Xinjiang was still far from sufficient. Long-term monitoring on population dynamics and invasion pathways of alien animals is necessary for scientific management. Market investigations on local husbandry and pet trade (<a class="xref xref-bibr" href="https://doi.org/10.1007%2Fs10530-014-0686-1" title="Patterns of non-randomness in the composition and characteristics of the Taiwanese bird trade" data-jats-ref-type="bibr" data-jats-rid="ref-44">Su, Cassey &amp; Blackburn, 2014</a>) are feasible complementary measures of alien animal monitoring, especially for mammals and birds. Additionally, “event-level” information (e.g. propagule pressure) should be recorded for understanding early stages of the invasion process. We also recommended taxonomically balanced study of alien species in future. Enrichment of knowledge on alien species will help to develop sound policies on biological invasions. This is vital for a research-lagged region like Xinjiang, because less-informed policies might aggravate current unequal allocation of resource for scientific research. Insufficient resource and supports will hinder researchers from concealing risks of less-concerned species with potential invasiveness. Successful control of biological invasions requires co-production of knowledge within a co-management governance system (<a class="xref xref-bibr" href="https://doi.org/10.1007%2Fs10530-015-0904-5" title="Understanding and integrating knowledge to improve invasive species management" data-jats-ref-type="bibr" data-jats-rid="ref-33">Moon, Blackman &amp; Brewer, 2015</a>). For a multi-ethnic inhabited region such as Xinjiang, community stakeholders should be viewed as equal partners in policy making and action implementing, in order to prevent dissent and conflict caused by different cultural backgrounds.</p>
        <p id="p-37">Recently, alien species have been testified to hold a greater likelihood of becoming “invasive” pertaining to a population level in many taxa (<a class="xref xref-bibr" href="https://scholar.google.com/scholar_lookup?title=A proposed unified framework for biological invasions&amp;author=Blackburn&amp;publication_year=2011" title="A proposed unified framework for biological invasions" data-jats-ref-type="bibr" data-jats-rid="ref-2">Blackburn et al., 2011</a>; <a class="xref xref-bibr" href="https://doi.org/10.1890%2F11-1232.1" title="The natives are restless, but not often and mostly when disturbed" data-jats-ref-type="bibr" data-jats-rid="ref-42">Simberloff et al., 2012</a>; <a class="xref xref-bibr" href="https://doi.org/10.1111%2Fddi.12073" title="Origin matters: alien consumers inflict greater damage on prey populations than do native consumers" data-jats-ref-type="bibr" data-jats-rid="ref-34">Paolucci, MacIsaac &amp; Ricciardi, 2013</a>; <a class="xref xref-bibr" href="https://doi.org/10.1890%2F130188" title="Are non-native species more likely to become pests? Influence of biogeographic origin on the impacts of freshwater organisms" data-jats-ref-type="bibr" data-jats-rid="ref-14">Hassan &amp; Ricciardi, 2014</a>). Therefore, potential risks of alien species deserve consideration in management decisions. In this context, to mitigate ecosystem impact and economic loss, priority should be transferred from eradication to prevention and early detection which hold visible and long-term effectiveness in invasive species management (<a class="xref xref-bibr" href="https://doi.org/10.1111%2Fj.1570-7458.2012.01259.x" title="Risk assessment for invasive species produces net bioeconomic benefits" data-jats-ref-type="bibr" data-jats-rid="ref-24">Keller, Lodge &amp; Finnoff, 2007</a>). In cases such as the least-concerned alien herpeto-species, congener diversity of recipient localities is recommended to assist for evaluating risks and prevention, when a certain species is entrained on introductions or proposed for introduction (<a class="xref xref-bibr" href="https://doi.org/10.1111%2Fele.12286" title="Congener diversity, topographic heterogeneity and human-assisted dispersal predict spread rates of alien herpetofauna at a global scale" data-jats-ref-type="bibr" data-jats-rid="ref-27">Liu et al., 2014</a>). Considering the uncertain and delayed impacts of invasions (<a class="xref xref-bibr" href="https://doi.org/10.1016%2Fj.tree.2012.07.013" title="Impacts of biological invasions: what’s what and the way forward" data-jats-ref-type="bibr" data-jats-rid="ref-43">Simberloff et al., 2013</a>; <a class="xref xref-bibr" href="https://doi.org/10.1016%2Fj.tree.2015.05.002" title="Delayed biodiversity change: no time to waste" data-jats-ref-type="bibr" data-jats-rid="ref-11">Essl et al., 2015</a>), we suggested paying attention to alien animals that have yet not become “invasive” in Xinjiang but are included in Global Invasive Species Database (<a class="xref xref-bibr" href="http://www.issg.org/database/welcome/" title="Global Invasive Species Database" data-jats-ref-type="bibr" data-jats-rid="ref-22">ISSG, 2014</a>), such as the American mink (<i>Neovison vison</i>), racoon dog (<i>Nyctereutes procyonoides</i>), and snakehead fish (<i>Channa argus</i>), since their invasiveness has been witnessed by comprehensive and significant impacts in other regions of the world. Monitoring their population dynamics and impacts will help for surveillance and timely eradication. Furthermore, we called for applications of risk assessment tools, for example, horizon scanning (<a class="xref xref-bibr" href="https://doi.org/10.1111%2Fgcb.12603" title="Horizon scanning for invasive alien species with the potential to threaten biodiversity in Great Britain" data-jats-ref-type="bibr" data-jats-rid="ref-41">Roy et al., 2014</a>) and adaptive modelling (<a class="xref xref-bibr" href="https://doi.org/10.1007%2Fs10530-015-0914-3" title="Adaptive invasive species distribution models: a framework for modeling incipient invasions" data-jats-ref-type="bibr" data-jats-rid="ref-46">Uden et al., 2015</a>) based on ecological niche models (ENMs, <a class="xref xref-bibr" href="https://doi.org/10.1007%2Fs10530-011-9963-4" title="Use of niche models in invasive species risk assessments" data-jats-ref-type="bibr" data-jats-rid="ref-23">Jiménez-Valverde et al., 2011</a>), to predict the hazards posed by alien species, especially those with no prior invasion history in Xinjiang, as well as the vulnerability of native biodiversity to emerging disturbance. The tools will contribute to prioritization of risks brought by alien species for developing management strategies on animal invasions through systematically examining potential threats and opportunities in the future. Finally, the role of oasis playing in animal invasions in arid zone is significant, as it is often environmentally suitable and exposes to high propagule pressure. This fact needs special concern during the execution of the China’s “New Silk Road” economic belt strategy, because economic drivers will accelerate introductions of invasive alien species in emerging oasis economies which are stepping stones of development in arid zones.</p>
      </section>
    </section>
    <section class="sec" id="conclusions">
      <h2 class="heading">Conclusions</h2>
      <p id="p-38">Xinjiang, located in the arid zone of Asia, is a poorly-known region when it comes to invasion ecology. This study confirmed that occurrence, establishment, spread of alien animal species were associations with human and environmental factors. During the past six decades, development of transportation and trade facilitated alien animals entering this closed inner-land region; local economic development level and availability of water resources contributed to distribution pattern of alien animals in Xinjiang. Oases were important battlefields for prevention and management of invasive animals in the arid environment. Based on research status of animal invasions in Xinjiang, we suggested reallocating more efforts to alien population monitoring, particularly for species with highly invasive potential; for those invasive species, impact and risk assessment were urgently needed.</p>
    </section>
    <section class="sec" id="supplemental-information">
      <h2 class="heading">Supplemental Information</h2>
      <div class="supplementary-material well well-small" id="supp-1"><h3 class="heading">Linear regression model summary on alien species distribution and potential variable.</h3>
          
          <p id="p-39">Dependent of each model is the number of alien species per prefecture. a: SW, volume of surface water resource; GDP, gross domestic products; TS, the share of transportation output in GDP. b: <i>R</i>, multiple correlation coefficient; <i>R<sup>2</sup></i>, determination coefficient, reflects the proportion in variance of response variables is explained by predictors. As <i>R<sup>2</sup></i> will rise with number of variables increasing in multiple regression analysis, we used adjusted <i>R<sup>2</sup></i> for testing the fitness of the model. Durbin-Watson parameter (DW), reflects independence of residuals in the model. We consider estimations and conclusions based on a certain model are credible when DW approximates to 2.</p>
        <div class="object-id article-component-doi">DOI: <a href="https://doi.org/10.7717/peerj.1545/supp-1" data-toggle="tooltip" title="Cite this object using this DOI">10.7717/peerj.1545/supp-1</a></div><div><a href="https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/Table_S1.docx" class="btn article-supporting-download" data-rel="supplement" download="Table_S1.docx" data-filename="Table_S1.docx"><i class="icon-large icon-download-alt"> </i> Download</a></div></div>
      <div class="supplementary-material well well-small" id="supp-2"><h3 class="heading">Coefficients and excluded variables in the linear regression model.</h3>
          
          <p id="p-40"><b>a:</b> B, unstandardized regression coefficients; β, standardized regression coefficients, used for comparing contribution of predictors to the response variable; t, used for testing predictive result of variables. An ideal predictor should hold t value above 2 or below −2. <b>b:</b> we used 15 as the threshold of condition index, of which value above 15 indicated a collineray between variables. Besides, collineary is considered existing if the tolerance and eigenvalue approximated to 0. <b>c:</b> indicated <i>P</i> &lt; 0.0001 <b>d:</b> we excluded potential predictors from the final model using the standard of −2 &lt; t &lt; 2 and <i>P</i>&gt; 0.05. Area of the prefecture, wetlands and used land, GDP, share of transportation output and imports in GDP were log transformed before analysis to normalize the data.</p>
        <div class="object-id article-component-doi">DOI: <a href="https://doi.org/10.7717/peerj.1545/supp-2" data-toggle="tooltip" title="Cite this object using this DOI">10.7717/peerj.1545/supp-2</a></div><div><a href="https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/Table_S2.docx" class="btn article-supporting-download" data-rel="supplement" download="Table_S2.docx" data-filename="Table_S2.docx"><i class="icon-large icon-download-alt"> </i> Download</a></div></div>
      <div class="supplementary-material well well-small" id="supp-3"><h3 class="heading">Correlation Analysis on temporal trends of alien introductions and human factors.</h3>
          
          <p id="p-41">a: GDP, gross domestic products; TS, the share of transportation output in GDP; IS, the share of imports in GDP. * Correlation is significant at the 0.05 level (2-tailed).</p>
        <div class="object-id article-component-doi">DOI: <a href="https://doi.org/10.7717/peerj.1545/supp-3" data-toggle="tooltip" title="Cite this object using this DOI">10.7717/peerj.1545/supp-3</a></div><div><a href="https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/Table_S3.docx" class="btn article-supporting-download" data-rel="supplement" download="Table_S3.docx" data-filename="Table_S3.docx"><i class="icon-large icon-download-alt"> </i> Download</a></div></div>
      <div class="supplementary-material well well-small" id="supp-4"><h3 class="heading">Raw data.</h3>
          
        <div class="object-id article-component-doi">DOI: <a href="https://doi.org/10.7717/peerj.1545/supp-4" data-toggle="tooltip" title="Cite this object using this DOI">10.7717/peerj.1545/supp-4</a></div><div><a href="https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/Raw_data.xlsx" class="btn article-supporting-download" data-rel="supplement" download="Raw_data.xlsx" data-filename="Raw_data.xlsx"><i class="icon-large icon-download-alt"> </i> Download</a></div></div>
      <div class="supplementary-material well well-small" id="supp-5"><h3 class="heading">Supplemental Reference List.</h3>
          
          <p id="p-42">We listed literature, reports and databases that were used for data extraction but were not referenced in the <b>Main Text</b> as part of the raw data.</p>
        <div class="object-id article-component-doi">DOI: <a href="https://doi.org/10.7717/peerj.1545/supp-5" data-toggle="tooltip" title="Cite this object using this DOI">10.7717/peerj.1545/supp-5</a></div><div><a href="https://dfzljdn9uc3pi.cloudfront.net/2016/1545/1/Supplemental_Reference.docx" class="btn article-supporting-download" data-rel="supplement" download="Supplemental_Reference.docx" data-filename="Supplemental_Reference.docx"><i class="icon-large icon-download-alt"> </i> Download</a></div></div>
    </section>
  </div>
      </main>
      <footer class="back">
    <section class="ack" id="acknowledgements"><h2 class="heading">Acknowledgements</h2>
      <p>We are grateful to Professor Guoying Yuan from the Xinjiang Department of Environmental Protection for providing data of alien species in Xinjiang and expert consultation. We thank Yanwu Ma from the Xinjiang Fishery Sciences Research Institute for providing consultation on alien fish species. Xincheng Ji from the Xinjiang Entry-exit Inspection and Quarantine Bureau is also acknowledged here for providing the number of alien species intercepted in imports.</p>
      <p>We also thank Dr. Eric I. Ameca y Juárez for proofreading the manuscript.</p>
    </section>
    <div class="sec" id="additional-information">
      <h2 class="heading">Additional Information and Declarations</h2>
      <div class="fn-group" data-jats-content-type="competing-interests">
        <h3 class="heading">Competing Interests</h3>
        <div class="fn" data-jats-fn-type="conflict" id="conflict-1">
          <p>The authors declare that they have no competing interests.</p>
        </div>
      </div>
      <div class="fn-group" data-jats-content-type="author-contributions">
        <h3 class="heading">Author Contributions</h3>
        <div class="fn" data-jats-fn-type="con" id="contribution-1">
          <p><a class="xref xref-contrib" href="#author-1" data-jats-ref-type="contrib" data-jats-rid="author-1">Lyubing Zhang</a> conceived and designed the experiments, performed the experiments, analyzed the data, wrote the paper, prepared figures and/or tables.</p>
        </div>
        <div class="fn" data-jats-fn-type="con" id="contribution-2">
          <p><a class="xref xref-contrib" href="#author-2" data-jats-ref-type="contrib" data-jats-rid="author-2">Zhigang Jiang</a> conceived and designed the experiments, contributed reagents/materials/analysis tools, reviewed drafts of the paper.</p>
        </div>
      </div>
      <div class="fn-group" data-jats-content-type="other">
        <h3 class="heading">Data Deposition</h3>
        <div class="fn" id="addinfo-1">
          <p>The following information was supplied regarding data availability:</p>
          <p>Raw data can be found in the <a class="xref xref-supplementary-material" href="#supp-4" data-jats-ref-type="supplementary-material" data-jats-rid="supp-4">Supplemental Information</a>.</p>
        </div>
      </div>
    <h3 class="heading">Funding</h3><p>This work is funded by National Basic Science Program of China (2013FY110300) and the Chinese Environmental Stewardship Award of Conoco Philips China (G 66012446). The funders had no role in study design, data collection and analysis, decision to publish, or preparation of the manuscript.</p></div>
    <section class="ref-list-container" id="references"><h2 class="heading">References</h2><ul class="ref-list" data-jats-content-type="authoryear"><li class="ref"><div class="citation" itemprop="citation" itemscope="itemscope" itemtype="http://schema.org/ScholarlyArticle" id="ref-1"><span class="citation-authors-year"><b><span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Bi</span> <span class="given-names" itemprop="givenName">K</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Liao</span> <span class="given-names" itemprop="givenName">K</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Li</span> <span class="given-names" itemprop="givenName">J</span></span>.</b> <b class="year" itemprop="datePublished">2002</b>.</span> <cite itemprop="name"><a class="article-title" target="_blank" itemprop="url" href="https://scholar.google.com/scholar_lookup?title=Analysis of the production and its development of fruit trees in Xinjiang&amp;author=Bi&amp;publication_year=2002">Analysis of the production and its development of fruit trees in Xinjiang</a>.</cite> <span><span class="issue" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationIssue"><span class="volume" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationVolume"><span class="source" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/Periodical"><span itemprop="name">Journal of Xinjiang Agricultural University</span></span> <b itemprop="volumeNumber">25</b></span>(<span itemprop="issueNumber">supplement</span>)</span>:<span class="fpage" itemprop="pageStart">57</span>-<span class="lpage" itemprop="pageEnd">61</span>  <span class="comment">(in Chinese)</span></span></div></li><li class="ref"><div class="citation" itemprop="citation" itemscope="itemscope" itemtype="http://schema.org/ScholarlyArticle" id="ref-1a"><span class="citation-authors-year"><b><span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Bi</span> <span class="given-names" itemprop="givenName">K</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Liao</span> <span class="given-names" itemprop="givenName">K</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Li</span> <span class="given-names" itemprop="givenName">J</span></span>.</b> <b class="year" itemprop="datePublished">2009</b>.</span> <cite itemprop="name"><a class="article-title" target="_blank" itemprop="url" href="https://scholar.google.com/scholar_lookup?title=Analysis of the production and its development of fruit trees in Xinjiang&amp;author=Bi&amp;publication_year=2009">Analysis of the production and its development of fruit trees in Xinjiang</a>.</cite> <span><span class="volume" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationVolume"><span class="source" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/Periodical"><span itemprop="name">Journal of Xinjiang Agricultural University</span></span> <b itemprop="volumeNumber">25</b></span>:<span class="fpage" itemprop="pageStart">57</span>-<span class="lpage" itemprop="pageEnd">61</span>  <span class="comment">(in Chinese)</span></span></div></li><li class="ref"><div class="citation" itemprop="citation" itemscope="itemscope" itemtype="http://schema.org/ScholarlyArticle" id="ref-2"><span class="citation-authors-year"><b><span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Blackburn</span> <span class="given-names" itemprop="givenName">TM</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Pyšek</span> <span class="given-names" itemprop="givenName">P</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Bacher</span> <span class="given-names" itemprop="givenName">S</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Carlton</span> <span class="given-names" itemprop="givenName">JT</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Duncan</span> <span class="given-names" itemprop="givenName">RP</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Jarošík</span> <span class="given-names" itemprop="givenName">V</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Wilson</span> <span class="given-names" itemprop="givenName">JRU</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Richardson</span> <span class="given-names" itemprop="givenName">DM</span></span>.</b> <b class="year" itemprop="datePublished">2011</b>.</span> <cite itemprop="name"><a class="article-title" target="_blank" itemprop="url" href="https://scholar.google.com/scholar_lookup?title=A proposed unified framework for biological invasions&amp;author=Blackburn&amp;publication_year=2011">A proposed unified framework for biological invasions</a>.</cite> <span><span class="issue" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationIssue"><span class="volume" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationVolume"><span class="source" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/Periodical"><span itemprop="name">Trends in Ecology &amp; Evolution</span></span> <b itemprop="volumeNumber">26</b></span>(<span itemprop="issueNumber">7</span>)</span>:<span class="fpage" itemprop="pageStart">333</span>-<span class="lpage" itemprop="pageEnd">339</span> </span></div></li><li class="ref"><div class="citation" itemprop="citation" itemscope="itemscope" id="ref-3"><span class="citation-authors-year"> <b class="year" itemprop="datePublished">2014</b>.</span> <cite class="article-title"><a class="article-title" target="_blank" itemprop="url" href="http://www.cabi.org/isc">Invasive Species Compendium</a>.</cite> <span>  Wallingford: <span class="publisher">CABI</span>.   <span class="comment"><i>Available at <a class="uri" href="http://www.cabi.org/isc">www.cabi.org/isc</a></i> (accessed 26 September, 2014)</span></span></div></li><li class="ref"><div class="citation" itemprop="citation" itemscope="itemscope" id="ref-4"><span class="citation-authors-year"> <b class="year" itemprop="datePublished">2015</b>.</span> <cite class="article-title"/> <span class="source">China Animal Scientific Database (in Chinese)</span>. <span>  Beijing: <span class="publisher">Chinese Academy of Science</span>.   <span class="comment"><i>Available at <a class="uri" href="http://www.zoology.csdb.cn/page/index.vpage">http://www.zoology.csdb.cn/page/index.vpage</a></i> (accessed 5 November, 2014)</span></span></div></li><li class="ref"><div class="citation" itemprop="citation" itemscope="itemscope" itemtype="http://schema.org/Book" id="ref-5"><span class="citation-authors-year"><b><span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Chen</span> <span class="given-names" itemprop="givenName">H</span></span>.</b> <b class="year" itemprop="datePublished">2014</b>.</span> <cite class="article-title"/> <span itemprop="name"><a class="source" target="_blank" href="https://scholar.google.com/scholar_lookup?title=Statistic Yearbook of Xinjiang&amp;author=&amp;publication_year=2014">Statistic Yearbook of Xinjiang</a>.</span><span>  Beijing: <span class="publisher">China Statistics Press</span>.   <span class="comment">(in Chinese)</span></span></div></li><li class="ref"><div class="citation" itemprop="citation" itemscope="itemscope" id="ref-6"><span class="citation-authors-year"> <b class="year" itemprop="datePublished">2014</b>.</span> <cite class="article-title"/> <span class="source">China Knowledge Resource Integrated Database (in Chinese)</span>. <span>    <span class="comment"><i>Available at <a class="uri" href="http://www.zoology.csdb.cn/page/index.vpage">http://www.zoology.csdb.cn/page/index.vpage</a></i> (accessed 5 November, 2014)</span></span></div></li><li class="ref"><div class="citation" itemprop="citation" itemscope="itemscope" itemtype="http://schema.org/ScholarlyArticle" id="ref-7"><span class="citation-authors-year"><b><span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Crall</span> <span class="given-names" itemprop="givenName">AW</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Meyerson</span> <span class="given-names" itemprop="givenName">LA</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Stohlgren</span> <span class="given-names" itemprop="givenName">TJ</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Jarnevich</span> <span class="given-names" itemprop="givenName">CS</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Newman</span> <span class="given-names" itemprop="givenName">GJ</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Graham</span> <span class="given-names" itemprop="givenName">J</span></span>.</b> <b class="year" itemprop="datePublished">2006</b>.</span> <cite itemprop="name"><a class="article-title" target="_blank" itemprop="url" href="https://scholar.google.com/scholar_lookup?title=Show me the numbers: what data currently exist for non-native species in the USA?&amp;author=Crall&amp;publication_year=2006">Show me the numbers: what data currently exist for non-native species in the USA?</a></cite> <span><span class="issue" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationIssue"><span class="volume" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationVolume"><span class="source" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/Periodical"><span itemprop="name">Frontiers in Ecology and the Environment</span></span> <b itemprop="volumeNumber">4</b></span>(<span itemprop="issueNumber">8</span>)</span>:<span class="fpage" itemprop="pageStart">414</span>-<span class="lpage" itemprop="pageEnd">418</span> </span></div></li><li class="ref"><div class="citation" itemprop="citation" itemscope="itemscope" itemtype="http://schema.org/Book" id="ref-8"><span class="citation-authors-year"><b><span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">D’antonio</span> <span class="given-names" itemprop="givenName">C</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Dudley</span> <span class="given-names" itemprop="givenName">T</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Mack</span> <span class="given-names" itemprop="givenName">M</span></span>.</b> <b class="year" itemprop="datePublished">1999</b>.</span> <cite class="article-title"><a class="article-title" target="_blank" itemprop="url" href="https://scholar.google.com/scholar_lookup?title=Disturbance and biological invasions: direct effects and feedbacks&amp;author=D’antonio&amp;publication_year=1999">Disturbance and biological invasions: direct effects and feedbacks</a>.</cite> In: <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Walker</span> <span class="given-names" itemprop="givenName">LR</span></span>, ed. <span itemprop="name"><a class="source" target="_blank" href="https://scholar.google.com/scholar_lookup?title=Ecosystems of Disturbed Ground&amp;author=Walker&amp;publication_year=1999">Ecosystems of Disturbed Ground</a>.</span><span>  Amsterdam: <span class="publisher">Elsevier</span>. <span class="fpage" itemprop="pageStart">413</span>-<span class="lpage" itemprop="pageEnd">452</span> </span></div></li><li class="ref"><div class="citation" itemprop="citation" itemscope="itemscope" itemtype="http://schema.org/ScholarlyArticle" id="ref-9"><span class="citation-authors-year"><b><span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Ding</span> <span class="given-names" itemprop="givenName">J</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Mack</span> <span class="given-names" itemprop="givenName">RN</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Lu</span> <span class="given-names" itemprop="givenName">P</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Ren</span> <span class="given-names" itemprop="givenName">M</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Huang</span> <span class="given-names" itemprop="givenName">H</span></span>.</b> <b class="year" itemprop="datePublished">2008</b>.</span> <cite itemprop="name"><a class="article-title" target="_blank" itemprop="url" href="https://doi.org/10.1641%2FB580407">China’s booming economy is sparking and accelerating biological invasions</a>.</cite> <span><span class="issue" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationIssue"><span class="volume" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationVolume"><span class="source" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/Periodical"><span itemprop="name">Bioscience</span></span> <b itemprop="volumeNumber">58</b></span>(<span itemprop="issueNumber">4</span>)</span>:<span class="fpage" itemprop="pageStart">317</span>-<span class="lpage" itemprop="pageEnd">324</span> </span></div></li><li class="ref"><div class="citation" itemprop="citation" itemscope="itemscope" id="ref-10"><span class="citation-authors-year"> <b class="year" itemprop="datePublished">2007</b>.</span> <cite class="article-title"/> <span class="source">Guidelines on Pest Risk Analysis: Decision-support Scheme for Quarantine Pests PM5/3(3)</span>. <span>  Paris: <span class="publisher">European &amp; Mediterranean Plant Protection Organization</span>.   <span class="comment"><i>Available at <a class="uri" href="http://archives.eppo.org/EPPOStandards/PM5_PRA/PRA_scheme_2007.doc">http://archives.eppo.org/EPPOStandards/PM5_PRA/PRA_scheme_2007.doc</a></i> (accessed 10 December, 2014)</span></span></div></li><li class="ref"><div class="citation" itemprop="citation" itemscope="itemscope" itemtype="http://schema.org/ScholarlyArticle" id="ref-11"><span class="citation-authors-year"><b><span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Essl</span> <span class="given-names" itemprop="givenName">F</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Dullinger</span> <span class="given-names" itemprop="givenName">S</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Rabitsch</span> <span class="given-names" itemprop="givenName">W</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Hulme</span> <span class="given-names" itemprop="givenName">PE</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Pyšek</span> <span class="given-names" itemprop="givenName">P</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Wilson</span> <span class="given-names" itemprop="givenName">JRU</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Richardson</span> <span class="given-names" itemprop="givenName">DM</span></span>.</b> <b class="year" itemprop="datePublished">2015</b>.</span> <cite itemprop="name"><a class="article-title" target="_blank" itemprop="url" href="https://doi.org/10.1016%2Fj.tree.2015.05.002">Delayed biodiversity change: no time to waste</a>.</cite> <span><span class="issue" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationIssue"><span class="volume" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationVolume"><span class="source" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/Periodical"><span itemprop="name">Trends in Ecology &amp; Evolution</span></span> <b itemprop="volumeNumber">30</b></span>(<span itemprop="issueNumber">7</span>)</span>:<span class="fpage" itemprop="pageStart">375</span>-<span class="lpage" itemprop="pageEnd">378</span> </span></div></li><li class="ref"><div class="citation" itemprop="citation" itemscope="itemscope" itemtype="http://schema.org/ScholarlyArticle" id="ref-12"><span class="citation-authors-year"><b><span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Guo</span> <span class="given-names" itemprop="givenName">W</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Tursun</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Zhou</span> <span class="given-names" itemprop="givenName">G</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Liu</span> <span class="given-names" itemprop="givenName">Z</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Zhang</span> <span class="given-names" itemprop="givenName">X</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Qin</span> <span class="given-names" itemprop="givenName">X</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Li</span> <span class="given-names" itemprop="givenName">J</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Zhang</span> <span class="given-names" itemprop="givenName">W</span></span>.</b> <b class="year" itemprop="datePublished">2012a</b>.</span> <cite itemprop="name"><a class="article-title" target="_blank" itemprop="url" href="https://scholar.google.com/scholar_lookup?title=The status and trend of invasive alien species in agriculture and forest in Xinjiang, China and relevant countermeasures&amp;author=Guo&amp;publication_year=2012">The status and trend of invasive alien species in agriculture and forest in Xinjiang, China and relevant countermeasures</a>.</cite> <span><span class="issue" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationIssue"><span class="volume" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationVolume"><span class="source" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/Periodical"><span itemprop="name">Xinjiang Agricultural Sciences</span></span> <b itemprop="volumeNumber">49</b></span>(<span itemprop="issueNumber">1</span>)</span>:<span class="fpage" itemprop="pageStart">86</span>-<span class="lpage" itemprop="pageEnd">100</span>  <span class="comment">(in Chinese)</span></span></div></li><li class="ref"><div class="citation" itemprop="citation" itemscope="itemscope" itemtype="http://schema.org/Book" id="ref-13"><span class="citation-authors-year"><b><span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Guo</span> <span class="given-names" itemprop="givenName">Y</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Zhang</span> <span class="given-names" itemprop="givenName">R</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Cai</span> <span class="given-names" itemprop="givenName">L</span></span>.</b> <b class="year" itemprop="datePublished">2012b</b>.</span> <cite class="article-title"/> <span itemprop="name"><a class="source" target="_blank" href="https://scholar.google.com/scholar_lookup?title=Fishes of Xinjiang Uygur Autonomous Region, China&amp;author=&amp;publication_year=2012">Fishes of Xinjiang Uygur Autonomous Region, China</a>.</span><span>  Urumqi: <span class="publisher">XinJiang Science and Technology Press</span>.   <span class="comment">(in Chinese)</span></span></div></li><li class="ref"><div class="citation" itemprop="citation" itemscope="itemscope" itemtype="http://schema.org/ScholarlyArticle" id="ref-14"><span class="citation-authors-year"><b><span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Hassan</span> <span class="given-names" itemprop="givenName">A</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Ricciardi</span> <span class="given-names" itemprop="givenName">A</span></span>.</b> <b class="year" itemprop="datePublished">2014</b>.</span> <cite itemprop="name"><a class="article-title" target="_blank" itemprop="url" href="https://doi.org/10.1890%2F130188">Are non-native species more likely to become pests? Influence of biogeographic origin on the impacts of freshwater organisms</a>.</cite> <span><span class="issue" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationIssue"><span class="volume" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationVolume"><span class="source" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/Periodical"><span itemprop="name">Frontiers in Ecology and the Environment</span></span> <b itemprop="volumeNumber">12</b></span>(<span itemprop="issueNumber">4</span>)</span>:<span class="fpage" itemprop="pageStart">218</span>-<span class="lpage" itemprop="pageEnd">223</span> </span></div></li><li class="ref"><div class="citation" itemprop="citation" itemscope="itemscope" itemtype="http://schema.org/ScholarlyArticle" id="ref-15"><span class="citation-authors-year"><b><span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">He</span> <span class="given-names" itemprop="givenName">S</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Kuang</span> <span class="given-names" itemprop="givenName">H</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Liu</span> <span class="given-names" itemprop="givenName">Y</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Tan</span> <span class="given-names" itemprop="givenName">K</span></span>.</b> <b class="year" itemprop="datePublished">1999</b>.</span> <cite itemprop="name"><a class="article-title" target="_blank" itemprop="url" href="https://scholar.google.com/scholar_lookup?title=Natural geographical district of honeybee in China&amp;author=He&amp;publication_year=1999">Natural geographical district of honeybee in China</a>.</cite> <span><span class="issue" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationIssue"><span class="volume" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationVolume"><span class="source" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/Periodical"><span itemprop="name">Journal of Yunnan Agricultural University</span></span> <b itemprop="volumeNumber">14</b></span>(<span itemprop="issueNumber">3</span>)</span>:<span class="fpage" itemprop="pageStart">289</span>-<span class="lpage" itemprop="pageEnd">293</span>  <span class="comment">(in Chinese)</span></span></div></li><li class="ref"><div class="citation" itemprop="citation" itemscope="itemscope" itemtype="http://schema.org/Book" id="ref-15a"><span class="citation-authors-year"><b><span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Hu</span> <span class="given-names" itemprop="givenName">J</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Wu</span> <span class="given-names" itemprop="givenName">W</span></span>.</b> <b class="year" itemprop="datePublished">1989</b>.</span> <cite class="article-title"/> <span itemprop="name"><a class="source" target="_blank" href="https://scholar.google.com/scholar_lookup?title=Spiders from agricultural areas of Xinjiang Uygur Autonomous Region, China&amp;author=&amp;publication_year=2013">Spiders from agricultural areas of Xinjiang Uygur Autonomous Region, China</a>.</span><span>  Jinan: <span class="publisher">Shandong University Press</span>.   <span class="comment">(in Chinese)</span></span></div></li><li class="ref"><div class="citation" itemprop="citation" itemscope="itemscope" itemtype="http://schema.org/Book" id="ref-16"><span class="citation-authors-year"><b><span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Hu</span> <span class="given-names" itemprop="givenName">H</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Huang</span> <span class="given-names" itemprop="givenName">R</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Hou</span> <span class="given-names" itemprop="givenName">Y</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Wu</span> <span class="given-names" itemprop="givenName">J</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Yin</span> <span class="given-names" itemprop="givenName">L</span></span>.</b> <b class="year" itemprop="datePublished">2013</b>.</span> <cite class="article-title"/> <span itemprop="name"><a class="source" target="_blank" href="https://scholar.google.com/scholar_lookup?title=Handbook of Insects in Xinjiang&amp;author=&amp;publication_year=2013">Handbook of Insects in Xinjiang</a>.</span><span>  Urumqi: <span class="publisher">Xinjiang University Press</span>.   <span class="comment">(in Chinese)</span></span></div></li><li class="ref"><div class="citation" itemprop="citation" itemscope="itemscope" itemtype="http://schema.org/ScholarlyArticle" id="ref-17"><span class="citation-authors-year"><b><span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Holt</span> <span class="given-names" itemprop="givenName">BG</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Lessard</span> <span class="given-names" itemprop="givenName">JP</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Borregaard</span> <span class="given-names" itemprop="givenName">MK</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Fritz</span> <span class="given-names" itemprop="givenName">SA</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Araújo</span> <span class="given-names" itemprop="givenName">MB</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Dimitrov</span> <span class="given-names" itemprop="givenName">D</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Fabre</span> <span class="given-names" itemprop="givenName">PH</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Graham</span> <span class="given-names" itemprop="givenName">CH</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Graves</span> <span class="given-names" itemprop="givenName">GR</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Jønsson</span> <span class="given-names" itemprop="givenName">KA</span></span>.</b> <b class="year" itemprop="datePublished">2013</b>.</span> <cite itemprop="name"><a class="article-title" target="_blank" itemprop="url" href="https://doi.org/10.1126%2Fscience.1228282">An update of Wallace’s zoogeographic regions of the world</a>.</cite> <span><span class="issue" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationIssue"><span class="volume" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationVolume"><span class="source" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/Periodical"><span itemprop="name">Science</span></span> <b itemprop="volumeNumber">339</b></span>(<span itemprop="issueNumber">6115</span>)</span>:<span class="fpage" itemprop="pageStart">74</span>-<span class="lpage" itemprop="pageEnd">78</span> </span></div></li><li class="ref"><div class="citation" itemprop="citation" itemscope="itemscope" itemtype="http://schema.org/ScholarlyArticle" id="ref-18"><span class="citation-authors-year"><b><span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Hulme</span> <span class="given-names" itemprop="givenName">PE</span></span>.</b> <b class="year" itemprop="datePublished">2007</b>.</span> <cite itemprop="name"><a class="article-title" target="_blank" itemprop="url" href="https://scholar.google.com/scholar_lookup?title=Biological invasions in Europe: drivers, pressures, states, impacts and responses&amp;author=Hulme&amp;publication_year=2007">Biological invasions in Europe: drivers, pressures, states, impacts and responses</a>.</cite> <span><span class="volume" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationVolume"><span class="source" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/Periodical"><span itemprop="name">Issues in Environmental Science and Technology</span></span> <b itemprop="volumeNumber">25</b></span>:<span class="fpage" itemprop="pageStart">56</span>-<span class="lpage" itemprop="pageEnd">80</span> </span></div></li><li class="ref"><div class="citation" itemprop="citation" itemscope="itemscope" itemtype="http://schema.org/ScholarlyArticle" id="ref-19"><span class="citation-authors-year"><b><span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Hulme</span> <span class="given-names" itemprop="givenName">PE</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Bacher</span> <span class="given-names" itemprop="givenName">S</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Kenis</span> <span class="given-names" itemprop="givenName">M</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Klotz</span> <span class="given-names" itemprop="givenName">S</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Kühn</span> <span class="given-names" itemprop="givenName">I</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Minchin</span> <span class="given-names" itemprop="givenName">D</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Nentwig</span> <span class="given-names" itemprop="givenName">W</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Olenin</span> <span class="given-names" itemprop="givenName">S</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Panov</span> <span class="given-names" itemprop="givenName">V</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Pergl</span> <span class="given-names" itemprop="givenName">J</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Pyšek</span> <span class="given-names" itemprop="givenName">P</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Roques</span> <span class="given-names" itemprop="givenName">A</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Sol</span> <span class="given-names" itemprop="givenName">D</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Solarz</span> <span class="given-names" itemprop="givenName">W</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Vilà</span> <span class="given-names" itemprop="givenName">M</span></span>.</b> <b class="year" itemprop="datePublished">2008</b>.</span> <cite itemprop="name"><a class="article-title" target="_blank" itemprop="url" href="https://doi.org/10.1111%2Fj.1365-2664.2007.01442.x">Grasping at the routes of biological invasions: a framework for integrating pathways into policy</a>.</cite> <span><span class="issue" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationIssue"><span class="volume" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationVolume"><span class="source" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/Periodical"><span itemprop="name">Journal of Applied Ecology</span></span> <b itemprop="volumeNumber">45</b></span>(<span itemprop="issueNumber">2</span>)</span>:<span class="fpage" itemprop="pageStart">403</span>-<span class="lpage" itemprop="pageEnd">414</span> </span></div></li><li class="ref"><div class="citation" itemprop="citation" itemscope="itemscope" itemtype="http://schema.org/ScholarlyArticle" id="ref-20"><span class="citation-authors-year"><b><span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Hulme</span> <span class="given-names" itemprop="givenName">PE</span></span>.</b> <b class="year" itemprop="datePublished">2015</b>.</span> <cite itemprop="name"><a class="article-title" target="_blank" itemprop="url" href="https://doi.org/10.1111%2F1365-2664.12470">Invasion pathways at a crossroad: policy &amp; research challenges for managing alien species introductions</a>.</cite> <span><span class="issue" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationIssue"><span class="volume" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationVolume"><span class="source" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/Periodical"><span itemprop="name">Journal of Applied Ecology</span></span> <b itemprop="volumeNumber">52</b></span>(<span itemprop="issueNumber">6</span>)</span>:<span class="fpage" itemprop="pageStart">1418</span>-<span class="lpage" itemprop="pageEnd">1424</span> </span></div></li><li class="ref"><div class="citation" itemprop="citation" itemscope="itemscope" id="ref-21"><span class="citation-authors-year"> <b class="year" itemprop="datePublished">2014</b>.</span> <cite class="article-title"/><span> (<span class="edition">Version 2014.3</span>). Gland: <span class="publisher">IUCN</span>.</span> <span class="comment"><i>Available at <a class="uri" href="http://www.iucnredlist.org">http://www.iucnredlist.org</a></i> (accessed 15 January, 2014)</span> <span class="label label-software">software</span></div></li><li class="ref"><div class="citation" itemprop="citation" itemscope="itemscope" id="ref-22"><span class="citation-authors-year"> <b class="year" itemprop="datePublished">2014</b>.</span> <cite class="article-title"/> <span class="source">Global Invasive Species Database</span>. <span>    <span class="comment"><i>Available at <a class="uri" href="http://www.issg.org/database/welcome/">http://www.issg.org/database/welcome/</a></i> (accessed 4 January, 2014)</span></span></div></li><li class="ref"><div class="citation" itemprop="citation" itemscope="itemscope" itemtype="http://schema.org/ScholarlyArticle" id="ref-23"><span class="citation-authors-year"><b><span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Jiménez-Valverde</span> <span class="given-names" itemprop="givenName">A</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Peterson</span> <span class="given-names" itemprop="givenName">AT</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Soberón</span> <span class="given-names" itemprop="givenName">J</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Overton</span> <span class="given-names" itemprop="givenName">JM</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Aragón</span> <span class="given-names" itemprop="givenName">P</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Lobo</span> <span class="given-names" itemprop="givenName">JM</span></span>.</b> <b class="year" itemprop="datePublished">2011</b>.</span> <cite itemprop="name"><a class="article-title" target="_blank" itemprop="url" href="https://doi.org/10.1007%2Fs10530-011-9963-4">Use of niche models in invasive species risk assessments</a>.</cite> <span><span class="issue" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationIssue"><span class="volume" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationVolume"><span class="source" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/Periodical"><span itemprop="name">Biological Invasions</span></span> <b itemprop="volumeNumber">13</b></span>(<span itemprop="issueNumber">12</span>)</span>:<span class="fpage" itemprop="pageStart">2785</span>-<span class="lpage" itemprop="pageEnd">2797</span> </span></div></li><li class="ref"><div class="citation" itemprop="citation" itemscope="itemscope" itemtype="http://schema.org/ScholarlyArticle" id="ref-24"><span class="citation-authors-year"><b><span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Keller</span> <span class="given-names" itemprop="givenName">RP</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Lodge</span> <span class="given-names" itemprop="givenName">DM</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Finnoff</span> <span class="given-names" itemprop="givenName">DC</span></span>.</b> <b class="year" itemprop="datePublished">2007</b>.</span> <cite itemprop="name"><a class="article-title" target="_blank" itemprop="url" href="https://doi.org/10.1111%2Fj.1570-7458.2012.01259.x">Risk assessment for invasive species produces net bioeconomic benefits</a>.</cite> <span><span class="issue" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationIssue"><span class="volume" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationVolume"><span class="source" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/Periodical"><span itemprop="name">Proceedings of the National Academy of Sciences</span></span> <b itemprop="volumeNumber">104</b></span>(<span itemprop="issueNumber">1</span>)</span>:<span class="fpage" itemprop="pageStart">203</span>-<span class="lpage" itemprop="pageEnd">207</span> </span></div></li><li class="ref"><div class="citation" itemprop="citation" itemscope="itemscope" itemtype="http://schema.org/ScholarlyArticle" id="ref-25"><span class="citation-authors-year"><b><span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Lai</span> <span class="given-names" itemprop="givenName">Y</span></span>.</b> <b class="year" itemprop="datePublished">2009</b>.</span> <cite itemprop="name"><a class="article-title" target="_blank" itemprop="url" href="https://scholar.google.com/scholar_lookup?title=The relationship between the disappearence of Calanoida population and the introduction of Hypomesus olidus in Bosten Lake&amp;author=Lai&amp;publication_year=2009">The relationship between the disappearence of Calanoida population and the introduction of Hypomesus olidus in Bosten Lake</a>.</cite> <span><span class="volume" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationVolume"><span class="source" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/Periodical"><span itemprop="name">Journal of Hydroecology</span></span> <b itemprop="volumeNumber">2</b></span>:<span class="fpage" itemprop="pageStart">136</span>-<span class="lpage" itemprop="pageEnd">139</span>  <span class="comment">(in Chinese)</span></span></div></li><li class="ref"><div class="citation" itemprop="citation" itemscope="itemscope" itemtype="http://schema.org/Book" id="ref-25a"><span class="citation-authors-year"><b><span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Li</span> <span class="given-names" itemprop="givenName">S</span></span>.</b> <b class="year" itemprop="datePublished">1981</b>.</span> <cite class="article-title"/> <span itemprop="name"><a class="source" target="_blank" href="https://scholar.google.com/scholar_lookup?title=Distribution and zoogeographic division of freshwater fish in China&amp;author=&amp;publication_year=1981">Distribution and zoogeographic division of freshwater fish in China</a>.</span><span>  Beijing: <span class="publisher">Science Press</span>.   <span class="comment">(in Chinese)</span></span></div></li><li class="ref"><div class="citation" itemprop="citation" itemscope="itemscope" itemtype="http://schema.org/ScholarlyArticle" id="ref-26"><span class="citation-authors-year"><b><span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Liu</span> <span class="given-names" itemprop="givenName">N</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Li</span> <span class="given-names" itemprop="givenName">Y</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Zhang</span> <span class="given-names" itemprop="givenName">R</span></span>.</b> <b class="year" itemprop="datePublished">2012</b>.</span> <cite itemprop="name"><a class="article-title" target="_blank" itemprop="url" href="https://scholar.google.com/scholar_lookup?title=Invasion of Colorado potato beetle, Leptinotarsa decemlineata, in China: dispersal, occurrence, and economic impact&amp;author=Liu&amp;publication_year=2012">Invasion of Colorado potato beetle, <i>Leptinotarsa decemlineata</i>, in China: dispersal, occurrence, and economic impact</a>.</cite> <span><span class="issue" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationIssue"><span class="volume" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationVolume"><span class="source" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/Periodical"><span itemprop="name">Entomologia Experimentalis et Applicata</span></span> <b itemprop="volumeNumber">143</b></span>(<span itemprop="issueNumber">3</span>)</span>:<span class="fpage" itemprop="pageStart">207</span>-<span class="lpage" itemprop="pageEnd">217</span> </span></div></li><li class="ref"><div class="citation" itemprop="citation" itemscope="itemscope" itemtype="http://schema.org/ScholarlyArticle" id="ref-27"><span class="citation-authors-year"><b><span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Liu</span> <span class="given-names" itemprop="givenName">X</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Li</span> <span class="given-names" itemprop="givenName">X</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Liu</span> <span class="given-names" itemprop="givenName">Z</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Tingley</span> <span class="given-names" itemprop="givenName">R</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Kraus</span> <span class="given-names" itemprop="givenName">F</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Guo</span> <span class="given-names" itemprop="givenName">Z</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Li</span> <span class="given-names" itemprop="givenName">Y</span></span>.</b> <b class="year" itemprop="datePublished">2014</b>.</span> <cite itemprop="name"><a class="article-title" target="_blank" itemprop="url" href="https://doi.org/10.1111%2Fele.12286">Congener diversity, topographic heterogeneity and human-assisted dispersal predict spread rates of alien herpetofauna at a global scale</a>.</cite> <span><span class="issue" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationIssue"><span class="volume" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationVolume"><span class="source" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/Periodical"><span itemprop="name">Ecology Letters</span></span> <b itemprop="volumeNumber">17</b></span>(<span itemprop="issueNumber">7</span>)</span>:<span class="fpage" itemprop="pageStart">821</span>-<span class="lpage" itemprop="pageEnd">829</span> </span></div></li><li class="ref"><div class="citation" itemprop="citation" itemscope="itemscope" itemtype="http://schema.org/ScholarlyArticle" id="ref-28"><span class="citation-authors-year"><b><span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Lockwood</span> <span class="given-names" itemprop="givenName">JL</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Cassey</span> <span class="given-names" itemprop="givenName">P</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Blackburn</span> <span class="given-names" itemprop="givenName">T</span></span>.</b> <b class="year" itemprop="datePublished">2005</b>.</span> <cite itemprop="name"><a class="article-title" target="_blank" itemprop="url" href="https://doi.org/10.1016%2Fj.tree.2005.02.004">The role of propagule pressure in explaining species invasions</a>.</cite> <span><span class="issue" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationIssue"><span class="volume" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationVolume"><span class="source" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/Periodical"><span itemprop="name">Trends in Ecology &amp; Evolution</span></span> <b itemprop="volumeNumber">20</b></span>(<span itemprop="issueNumber">5</span>)</span>:<span class="fpage" itemprop="pageStart">223</span>-<span class="lpage" itemprop="pageEnd">228</span> </span></div></li><li class="ref"><div class="citation" itemprop="citation" itemscope="itemscope" itemtype="http://schema.org/Book" id="ref-29"><span class="citation-authors-year"><b><span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Ma</span> <span class="given-names" itemprop="givenName">M</span></span>.</b> <b class="year" itemprop="datePublished">2011</b>.</span> <cite class="article-title"/> <span itemprop="name"><a class="source" target="_blank" href="https://scholar.google.com/scholar_lookup?title=A Checklist on the Distribution of the Birds in Xinjiang&amp;author=&amp;publication_year=2011">A Checklist on the Distribution of the Birds in Xinjiang</a>.</span><span>  Beijing: <span class="publisher">Science Press</span>.   <span class="comment">(in Chinese)</span></span></div></li><li class="ref"><div class="citation" itemprop="citation" itemscope="itemscope" itemtype="http://schema.org/ScholarlyArticle" id="ref-30"><span class="citation-authors-year"><b><span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Ma</span> <span class="given-names" itemprop="givenName">Y</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Guo</span> <span class="given-names" itemprop="givenName">Y</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Zhang</span> <span class="given-names" itemprop="givenName">R</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Tuersun</span></span>.</b> <b class="year" itemprop="datePublished">2009</b>.</span> <cite itemprop="name"><a class="article-title" target="_blank" itemprop="url" href="https://scholar.google.com/scholar_lookup?title=Fauna composition and distribution of aboriginal fish in the Tarim River of Xinjiang Uygur Autonomous Region&amp;author=Ma&amp;publication_year=2009">Fauna composition and distribution of aboriginal fish in the Tarim River of Xinjiang Uygur Autonomous Region</a>.</cite> <span><span class="issue" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationIssue"><span class="volume" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationVolume"><span class="source" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/Periodical"><span itemprop="name">Journal of Fisheries of China</span></span> <b itemprop="volumeNumber">6</b></span>(<span itemprop="issueNumber">33</span>)</span>:<span class="fpage" itemprop="pageStart">949</span>-<span class="lpage" itemprop="pageEnd">956</span>  <span class="comment">(in Chinese)</span></span></div></li><li class="ref"><div class="citation" itemprop="citation" itemscope="itemscope" itemtype="http://schema.org/Book" id="ref-30a"><span class="citation-authors-year"><b><span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">MacKinnon</span> <span class="given-names" itemprop="givenName">J</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Philipps</span> <span class="given-names" itemprop="givenName">K</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">He</span> <span class="given-names" itemprop="givenName">F</span></span>.</b> <b class="year" itemprop="datePublished">2001</b>.</span> <cite class="article-title"/> <span itemprop="name"><a class="source" target="_blank" href="https://scholar.google.com/scholar_lookup?title=A field guide to the birds of China&amp;author=&amp;publication_year=2001">A field guide to the birds of China</a>.</span><span>  Oxford: <span class="publisher">Oxford University Press</span>.  </span></div></li><li class="ref"><div class="citation" itemprop="citation" itemscope="itemscope" itemtype="http://schema.org/ScholarlyArticle" id="ref-31"><span class="citation-authors-year"><b><span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">McGeoch</span> <span class="given-names" itemprop="givenName">MA</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Butchart</span> <span class="given-names" itemprop="givenName">SHM</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Spear</span> <span class="given-names" itemprop="givenName">D</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Marais</span> <span class="given-names" itemprop="givenName">E</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Kleynhans</span> <span class="given-names" itemprop="givenName">EJ</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Symes</span> <span class="given-names" itemprop="givenName">A</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Chanson</span> <span class="given-names" itemprop="givenName">J</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Hoffmann</span> <span class="given-names" itemprop="givenName">M</span></span>.</b> <b class="year" itemprop="datePublished">2010</b>.</span> <cite itemprop="name"><a class="article-title" target="_blank" itemprop="url" href="https://doi.org/10.1111%2Fj.1472-4642.2009.00633.x">Global indicators of biological invasion: species numbers, biodiversity impact and policy responses</a>.</cite> <span><span class="issue" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationIssue"><span class="volume" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationVolume"><span class="source" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/Periodical"><span itemprop="name">Diversity and Distributions</span></span> <b itemprop="volumeNumber">16</b></span>(<span itemprop="issueNumber">1</span>)</span>:<span class="fpage" itemprop="pageStart">95</span>-<span class="lpage" itemprop="pageEnd">108</span> </span></div></li><li class="ref"><div class="citation" itemprop="citation" itemscope="itemscope" itemtype="http://schema.org/Book" id="ref-32"><span class="citation-authors-year"> <b class="year" itemprop="datePublished">2005</b>.</span> <cite class="article-title"/> <span itemprop="name"><a class="source" target="_blank" href="https://scholar.google.com/scholar_lookup?title=Ecosystems and Human Well-Being: Current State and Trends: Findings of the Condition and Trends Working Group&amp;author=&amp;publication_year=2005">Ecosystems and Human Well-Being: Current State and Trends: Findings of the Condition and Trends Working Group</a>.</span><span>  Washington, D.C.: <span class="publisher">Island Press</span>.  </span></div></li><li class="ref"><div class="citation" itemprop="citation" itemscope="itemscope" itemtype="http://schema.org/ScholarlyArticle" id="ref-33"><span class="citation-authors-year"><b><span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Moon</span> <span class="given-names" itemprop="givenName">K</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Blackman</span> <span class="given-names" itemprop="givenName">DA</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Brewer</span> <span class="given-names" itemprop="givenName">TD</span></span>.</b> <b class="year" itemprop="datePublished">2015</b>.</span> <cite itemprop="name"><a class="article-title" target="_blank" itemprop="url" href="https://doi.org/10.1007%2Fs10530-015-0904-5">Understanding and integrating knowledge to improve invasive species management</a>.</cite> <span><span class="issue" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationIssue"><span class="volume" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationVolume"><span class="source" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/Periodical"><span itemprop="name">Biological Invasions</span></span> <b itemprop="volumeNumber">17</b></span>(<span itemprop="issueNumber">9</span>)</span>:<span class="fpage" itemprop="pageStart">2675</span>-<span class="lpage" itemprop="pageEnd">2689</span> </span></div></li><li class="ref"><div class="citation" itemprop="citation" itemscope="itemscope" itemtype="http://schema.org/ScholarlyArticle" id="ref-34"><span class="citation-authors-year"><b><span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Paolucci</span> <span class="given-names" itemprop="givenName">EM</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">MacIsaac</span> <span class="given-names" itemprop="givenName">HJ</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Ricciardi</span> <span class="given-names" itemprop="givenName">A</span></span>.</b> <b class="year" itemprop="datePublished">2013</b>.</span> <cite itemprop="name"><a class="article-title" target="_blank" itemprop="url" href="https://doi.org/10.1111%2Fddi.12073">Origin matters: alien consumers inflict greater damage on prey populations than do native consumers</a>.</cite> <span><span class="issue" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationIssue"><span class="volume" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationVolume"><span class="source" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/Periodical"><span itemprop="name">Diversity and Distributions</span></span> <b itemprop="volumeNumber">19</b></span>(<span itemprop="issueNumber">8</span>)</span>:<span class="fpage" itemprop="pageStart">988</span>-<span class="lpage" itemprop="pageEnd">995</span> </span></div></li><li class="ref"><div class="citation" itemprop="citation" itemscope="itemscope" itemtype="http://schema.org/ScholarlyArticle" id="ref-35"><span class="citation-authors-year"><b><span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Peng</span> <span class="given-names" itemprop="givenName">Y</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Xue</span> <span class="given-names" itemprop="givenName">D</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Wu</span> <span class="given-names" itemprop="givenName">L</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Xue</span> <span class="given-names" itemprop="givenName">F</span></span>.</b> <b class="year" itemprop="datePublished">2009</b>.</span> <cite itemprop="name"><a class="article-title" target="_blank" itemprop="url" href="https://scholar.google.com/scholar_lookup?title=Mechanism of biological invasions in Bosten Lake, Xinjiang&amp;author=Peng&amp;publication_year=2009">Mechanism of biological invasions in Bosten Lake, Xinjiang</a>.</cite> <span><span class="volume" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationVolume"><span class="source" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/Periodical"><span itemprop="name">Jiangsu Agricultural Sciences</span></span> <b itemprop="volumeNumber">5</b></span>:<span class="fpage" itemprop="pageStart">300</span>-<span class="lpage" itemprop="pageEnd">303</span>  <span class="comment">(in Chinese)</span></span></div></li><li class="ref"><div class="citation" itemprop="citation" itemscope="itemscope" itemtype="http://schema.org/ScholarlyArticle" id="ref-36"><span class="citation-authors-year"><b><span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Pyšek</span> <span class="given-names" itemprop="givenName">P</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Richardson</span> <span class="given-names" itemprop="givenName">DM</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Pergl</span> <span class="given-names" itemprop="givenName">J</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Jarošík</span> <span class="given-names" itemprop="givenName">V</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Sixtová</span> <span class="given-names" itemprop="givenName">Z</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Weber</span> <span class="given-names" itemprop="givenName">E</span></span>.</b> <b class="year" itemprop="datePublished">2008</b>.</span> <cite itemprop="name"><a class="article-title" target="_blank" itemprop="url" href="https://doi.org/10.1016%2Fj.tree.2008.02.002">Geographical and taxonomic biases in invasion ecology</a>.</cite> <span><span class="issue" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationIssue"><span class="volume" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationVolume"><span class="source" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/Periodical"><span itemprop="name">Trends in Ecology &amp; Evolution</span></span> <b itemprop="volumeNumber">23</b></span>(<span itemprop="issueNumber">5</span>)</span>:<span class="fpage" itemprop="pageStart">237</span>-<span class="lpage" itemprop="pageEnd">244</span> </span></div></li><li class="ref"><div class="citation" itemprop="citation" itemscope="itemscope" itemtype="http://schema.org/ScholarlyArticle" id="ref-37"><span class="citation-authors-year"><b><span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Pyšek</span> <span class="given-names" itemprop="givenName">P</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Jarošík</span> <span class="given-names" itemprop="givenName">V</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Hulme</span> <span class="given-names" itemprop="givenName">PE</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Kühn</span> <span class="given-names" itemprop="givenName">I</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Wild</span> <span class="given-names" itemprop="givenName">J</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Arianoutsou</span> <span class="given-names" itemprop="givenName">M</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Bacher</span> <span class="given-names" itemprop="givenName">S</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Chiron</span> <span class="given-names" itemprop="givenName">F</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Didžiulis</span> <span class="given-names" itemprop="givenName">V</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Essl</span> <span class="given-names" itemprop="givenName">F</span></span>.</b> <b class="year" itemprop="datePublished">2010</b>.</span> <cite itemprop="name"><a class="article-title" target="_blank" itemprop="url" href="https://doi.org/10.1073%2Fpnas.1002314107">Disentangling the role of environmental and human pressures on biological invasions across Europe</a>.</cite> <span><span class="issue" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationIssue"><span class="volume" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationVolume"><span class="source" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/Periodical"><span itemprop="name">Proceedings of the National Academy of Sciences</span></span> <b itemprop="volumeNumber">107</b></span>(<span itemprop="issueNumber">27</span>)</span>:<span class="fpage" itemprop="pageStart">12157</span>-<span class="lpage" itemprop="pageEnd">12162</span> </span></div></li><li class="ref"><div class="citation" itemprop="citation" itemscope="itemscope" itemtype="http://schema.org/ScholarlyArticle" id="ref-38"><span class="citation-authors-year"><b><span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Ren</span> <span class="given-names" itemprop="givenName">M</span></span>.</b> <b class="year" itemprop="datePublished">1998</b>.</span> <cite itemprop="name"><a class="article-title" target="_blank" itemprop="url" href="https://scholar.google.com/scholar_lookup?title=Fishes of River Ili&amp;author=Ren&amp;publication_year=1998">Fishes of River Ili</a>.</cite> <span><span class="volume" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationVolume"><span class="source" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/Periodical"><span itemprop="name">Chinese Journal of Fisheries</span></span> <b itemprop="volumeNumber">1</b></span>:<span class="fpage" itemprop="pageStart">7</span>-<span class="lpage" itemprop="pageEnd">17</span>  <span class="comment">(in Chinese)</span></span></div></li><li class="ref"><div class="citation" itemprop="citation" itemscope="itemscope" itemtype="http://schema.org/Book" id="ref-39"><span class="citation-authors-year"><b><span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Richardson</span> <span class="given-names" itemprop="givenName">DM</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Pyšek</span> <span class="given-names" itemprop="givenName">P</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Carlton</span> <span class="given-names" itemprop="givenName">JT</span></span>.</b> <b class="year" itemprop="datePublished">2011</b>.</span> <cite class="article-title"><a class="article-title" target="_blank" itemprop="url" href="https://scholar.google.com/scholar_lookup?title=A compendium of essential concepts and terminology in invasion ecology&amp;author=Richardson&amp;publication_year=2011">A compendium of essential concepts and terminology in invasion ecology</a>.</cite> In: <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Richardson</span> <span class="given-names" itemprop="givenName">DM</span></span>, ed. <span itemprop="name"><a class="source" target="_blank" href="https://scholar.google.com/scholar_lookup?title=Fifty Years of Invasion Ecology: The Legacy of Charles Elton&amp;author=Richardson&amp;publication_year=2011">Fifty Years of Invasion Ecology: The Legacy of Charles Elton</a>.</span><span>  Oxford: <span class="publisher">Wiley-Blackwell</span>. <span class="fpage" itemprop="pageStart">409</span>-<span class="lpage" itemprop="pageEnd">420</span> </span></div></li><li class="ref"><div class="citation" itemprop="citation" itemscope="itemscope" id="ref-40"><span class="citation-authors-year"> <b class="year" itemprop="datePublished">2015</b>.</span> <cite class="article-title"><a class="article-title" target="_blank" itemprop="url" href="http://www.catalogueoflife.org/col">Species 2000 &amp; ITIS Catalogue of Life, 18th March 2015</a>.</cite> <span>  Leiden, The Netherlands: <span class="publisher">Species 2000</span>.   <span class="comment"><i>Available at <a class="uri" href="http://www.catalogueoflife.org/col">www.catalogueoflife.org/col</a></i> (accessed 2 December, 2014)</span></span></div></li><li class="ref"><div class="citation" itemprop="citation" itemscope="itemscope" itemtype="http://schema.org/ScholarlyArticle" id="ref-41"><span class="citation-authors-year"><b><span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Roy</span> <span class="given-names" itemprop="givenName">HE</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Peyton</span> <span class="given-names" itemprop="givenName">J</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Aldridge</span> <span class="given-names" itemprop="givenName">DC</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Bantock</span> <span class="given-names" itemprop="givenName">T</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Blackburn</span> <span class="given-names" itemprop="givenName">TM</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Britton</span> <span class="given-names" itemprop="givenName">R</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Clark</span> <span class="given-names" itemprop="givenName">P</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Cook</span> <span class="given-names" itemprop="givenName">E</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Dehnen-Schmutz</span> <span class="given-names" itemprop="givenName">K</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Dines</span> <span class="given-names" itemprop="givenName">T</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Dobson</span> <span class="given-names" itemprop="givenName">M</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Edwards</span> <span class="given-names" itemprop="givenName">F</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Harrower</span> <span class="given-names" itemprop="givenName">C</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Harvey</span> <span class="given-names" itemprop="givenName">MC</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Minchin</span> <span class="given-names" itemprop="givenName">D</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Noble</span> <span class="given-names" itemprop="givenName">DG</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Parrott</span> <span class="given-names" itemprop="givenName">D</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Pocock</span> <span class="given-names" itemprop="givenName">MJO</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Preston</span> <span class="given-names" itemprop="givenName">CD</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Roy</span> <span class="given-names" itemprop="givenName">S</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Salisbury</span> <span class="given-names" itemprop="givenName">A</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Schönrogge</span> <span class="given-names" itemprop="givenName">K</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Sewell</span> <span class="given-names" itemprop="givenName">J</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Shaw</span> <span class="given-names" itemprop="givenName">RH</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Stebbing</span> <span class="given-names" itemprop="givenName">P</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Stewart</span> <span class="given-names" itemprop="givenName">AJA</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Walker</span> <span class="given-names" itemprop="givenName">KJ</span></span>.</b> <b class="year" itemprop="datePublished">2014</b>.</span> <cite itemprop="name"><a class="article-title" target="_blank" itemprop="url" href="https://doi.org/10.1111%2Fgcb.12603">Horizon scanning for invasive alien species with the potential to threaten biodiversity in Great Britain</a>.</cite> <span><span class="issue" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationIssue"><span class="volume" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationVolume"><span class="source" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/Periodical"><span itemprop="name">Global Change Biology</span></span> <b itemprop="volumeNumber">20</b></span>(<span itemprop="issueNumber">12</span>)</span>:<span class="fpage" itemprop="pageStart">3859</span>-<span class="lpage" itemprop="pageEnd">3871</span> </span></div></li><li class="ref"><div class="citation" itemprop="citation" itemscope="itemscope" itemtype="http://schema.org/ScholarlyArticle" id="ref-41a"><span class="citation-authors-year"><b><span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Simberloff</span> <span class="given-names" itemprop="givenName">D</span></span>.</b> <b class="year" itemprop="datePublished">2009</b>.</span> <cite itemprop="name"><a class="article-title" target="_blank" itemprop="url" href="https://scholar.google.com/scholar_lookup?title=The role of propagule pressure in biological invasions&amp;author=Simberloff&amp;publication_year=2009">The role of propagule pressure in biological invasions</a>.</cite> <span><span class="volume" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationVolume"><span class="source" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/Periodical"><span itemprop="name">Annual Review of Ecology, Evolution, and Systematics</span></span> <b itemprop="volumeNumber">40</b></span>:<span class="fpage" itemprop="pageStart">81</span>-<span class="lpage" itemprop="pageEnd">102</span> </span></div></li><li class="ref"><div class="citation" itemprop="citation" itemscope="itemscope" itemtype="http://schema.org/ScholarlyArticle" id="ref-42"><span class="citation-authors-year"><b><span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Simberloff</span> <span class="given-names" itemprop="givenName">D</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Souza</span> <span class="given-names" itemprop="givenName">L</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Nuñez</span> <span class="given-names" itemprop="givenName">MA</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Barrios-Garcia</span> <span class="given-names" itemprop="givenName">MN</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Bunn</span> <span class="given-names" itemprop="givenName">W</span></span>.</b> <b class="year" itemprop="datePublished">2012</b>.</span> <cite itemprop="name"><a class="article-title" target="_blank" itemprop="url" href="https://doi.org/10.1890%2F11-1232.1">The natives are restless, but not often and mostly when disturbed</a>.</cite> <span><span class="issue" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationIssue"><span class="volume" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationVolume"><span class="source" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/Periodical"><span itemprop="name">Ecology</span></span> <b itemprop="volumeNumber">93</b></span>(<span itemprop="issueNumber">3</span>)</span>:<span class="fpage" itemprop="pageStart">598</span>-<span class="lpage" itemprop="pageEnd">607</span> </span></div></li><li class="ref"><div class="citation" itemprop="citation" itemscope="itemscope" itemtype="http://schema.org/ScholarlyArticle" id="ref-43"><span class="citation-authors-year"><b><span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Simberloff</span> <span class="given-names" itemprop="givenName">D</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Martin</span> <span class="given-names" itemprop="givenName">JL</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Genovesi</span> <span class="given-names" itemprop="givenName">P</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Maris</span> <span class="given-names" itemprop="givenName">V</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Wardle</span> <span class="given-names" itemprop="givenName">DA</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Aronson</span> <span class="given-names" itemprop="givenName">J</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Courchamp</span> <span class="given-names" itemprop="givenName">F</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Galil</span> <span class="given-names" itemprop="givenName">B</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">García-Berthou</span> <span class="given-names" itemprop="givenName">E</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Pascal</span> <span class="given-names" itemprop="givenName">M</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Pyšek</span> <span class="given-names" itemprop="givenName">P</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Sousa</span> <span class="given-names" itemprop="givenName">R</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Tabacchi</span> <span class="given-names" itemprop="givenName">E</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Vilà</span> <span class="given-names" itemprop="givenName">M</span></span>.</b> <b class="year" itemprop="datePublished">2013</b>.</span> <cite itemprop="name"><a class="article-title" target="_blank" itemprop="url" href="https://doi.org/10.1016%2Fj.tree.2012.07.013">Impacts of biological invasions: what’s what and the way forward</a>.</cite> <span><span class="issue" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationIssue"><span class="volume" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationVolume"><span class="source" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/Periodical"><span itemprop="name">Trends in Ecology &amp; Evolution</span></span> <b itemprop="volumeNumber">28</b></span>(<span itemprop="issueNumber">1</span>)</span>:<span class="fpage" itemprop="pageStart">58</span>-<span class="lpage" itemprop="pageEnd">66</span> </span></div></li><li class="ref"><div class="citation" itemprop="citation" itemscope="itemscope" itemtype="http://schema.org/ScholarlyArticle" id="ref-44"><span class="citation-authors-year"><b><span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Su</span> <span class="given-names" itemprop="givenName">S</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Cassey</span> <span class="given-names" itemprop="givenName">P</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Blackburn</span> <span class="given-names" itemprop="givenName">T</span></span>.</b> <b class="year" itemprop="datePublished">2014</b>.</span> <cite itemprop="name"><a class="article-title" target="_blank" itemprop="url" href="https://doi.org/10.1007%2Fs10530-014-0686-1">Patterns of non-randomness in the composition and characteristics of the Taiwanese bird trade</a>.</cite> <span><span class="issue" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationIssue"><span class="volume" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationVolume"><span class="source" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/Periodical"><span itemprop="name">Biological Invasions</span></span> <b itemprop="volumeNumber">16</b></span>(<span itemprop="issueNumber">12</span>)</span>:<span class="fpage" itemprop="pageStart">2563</span>-<span class="lpage" itemprop="pageEnd">2575</span> </span></div></li><li class="ref"><div class="citation" itemprop="citation" itemscope="itemscope" itemtype="http://schema.org/ScholarlyArticle" id="ref-45"><span class="citation-authors-year"><b><span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Tang</span> <span class="given-names" itemprop="givenName">F</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Brown</span> <span class="given-names" itemprop="givenName">A</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Karjan</span> <span class="given-names" itemprop="givenName">A</span></span>.</b> <b class="year" itemprop="datePublished">2012</b>.</span> <cite itemprop="name"><a class="article-title" target="_blank" itemprop="url" href="https://scholar.google.com/scholar_lookup?title=Fish community successions in Lake Ulungur: A case of fish invasions in fragile oasis&amp;author=Tang&amp;publication_year=2012">Fish community successions in Lake Ulungur: A case of fish invasions in fragile oasis</a>.</cite> <span><span class="issue" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationIssue"><span class="volume" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationVolume"><span class="source" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/Periodical"><span itemprop="name">Russian Journal of Biological Invasions</span></span> <b itemprop="volumeNumber">3</b></span>(<span itemprop="issueNumber">1</span>)</span>:<span class="fpage" itemprop="pageStart">76</span>-<span class="lpage" itemprop="pageEnd">80</span> </span></div></li><li class="ref"><div class="citation" itemprop="citation" itemscope="itemscope" itemtype="http://schema.org/ScholarlyArticle" id="ref-46"><span class="citation-authors-year"><b><span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Uden</span> <span class="given-names" itemprop="givenName">DR</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Allen</span> <span class="given-names" itemprop="givenName">CR</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Angeler</span> <span class="given-names" itemprop="givenName">DG</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Lucía</span> <span class="given-names" itemprop="givenName">C</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Kent</span> <span class="given-names" itemprop="givenName">AF</span></span>.</b> <b class="year" itemprop="datePublished">2015</b>.</span> <cite itemprop="name"><a class="article-title" target="_blank" itemprop="url" href="https://doi.org/10.1007%2Fs10530-015-0914-3">Adaptive invasive species distribution models: a framework for modeling incipient invasions</a>.</cite> <span><span class="issue" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationIssue"><span class="volume" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationVolume"><span class="source" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/Periodical"><span itemprop="name">Biological Invasions</span></span> <b itemprop="volumeNumber">17</b></span>(<span itemprop="issueNumber">1</span>)</span>:<span class="fpage" itemprop="pageStart">2831</span>-<span class="lpage" itemprop="pageEnd">2850</span> </span></div></li><li class="ref"><div class="citation" itemprop="citation" itemscope="itemscope" itemtype="http://schema.org/ScholarlyArticle" id="ref-47"><span class="citation-authors-year"><b><span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Wang</span> <span class="given-names" itemprop="givenName">D</span></span>.</b> <b class="year" itemprop="datePublished">1995</b>.</span> <cite itemprop="name"><a class="article-title" target="_blank" itemprop="url" href="https://scholar.google.com/scholar_lookup?title=The changes of fishes fauna and protections of aboriginal fishes in the Tarim River&amp;author=Wang&amp;publication_year=1995">The changes of fishes fauna and protections of aboriginal fishes in the Tarim River</a>.</cite> <span><span class="issue" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationIssue"><span class="volume" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationVolume"><span class="source" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/Periodical"><span itemprop="name">Arid Zone Research</span></span> <b itemprop="volumeNumber">12</b></span>(<span itemprop="issueNumber">3</span>)</span>:<span class="fpage" itemprop="pageStart">54</span>-<span class="lpage" itemprop="pageEnd">59</span>  <span class="comment">(in Chinese)</span></span></div></li><li class="ref"><div class="citation" itemprop="citation" itemscope="itemscope" itemtype="http://schema.org/ScholarlyArticle" id="ref-48"><span class="citation-authors-year"><b><span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Weber</span> <span class="given-names" itemprop="givenName">E</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Sun</span> <span class="given-names" itemprop="givenName">SG</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Li</span> <span class="given-names" itemprop="givenName">B</span></span>.</b> <b class="year" itemprop="datePublished">2008</b>.</span> <cite itemprop="name"><a class="article-title" target="_blank" itemprop="url" href="https://doi.org/10.1007%2Fs10530-008-9216-3">Invasive alien plants in China: diversity and ecological insights</a>.</cite> <span><span class="issue" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationIssue"><span class="volume" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationVolume"><span class="source" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/Periodical"><span itemprop="name">Biological Invasions</span></span> <b itemprop="volumeNumber">10</b></span>(<span itemprop="issueNumber">8</span>)</span>:<span class="fpage" itemprop="pageStart">1411</span>-<span class="lpage" itemprop="pageEnd">1429</span> </span></div></li><li class="ref"><div class="citation" itemprop="citation" itemscope="itemscope" itemtype="http://schema.org/ScholarlyArticle" id="ref-49"><span class="citation-authors-year"><b><span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Wilson</span> <span class="given-names" itemprop="givenName">JRU</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Procheş</span> <span class="given-names" itemprop="givenName">Ş</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Braschler</span> <span class="given-names" itemprop="givenName">B</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Dixon</span> <span class="given-names" itemprop="givenName">ES</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Richardson</span> <span class="given-names" itemprop="givenName">DM</span></span>.</b> <b class="year" itemprop="datePublished">2007</b>.</span> <cite itemprop="name"><a class="article-title" target="_blank" itemprop="url" href="https://scholar.google.com/scholar_lookup?title=The (bio)diversity of science reflects the interests of society&amp;author=Wilson&amp;publication_year=2007">The (bio)diversity of science reflects the interests of society</a>.</cite> <span><span class="issue" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationIssue"><span class="volume" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationVolume"><span class="source" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/Periodical"><span itemprop="name">Frontiers in Ecology and the Environment</span></span> <b itemprop="volumeNumber">5</b></span>(<span itemprop="issueNumber">8</span>)</span>:<span class="fpage" itemprop="pageStart">409</span>-<span class="lpage" itemprop="pageEnd">414</span> </span></div></li><li class="ref"><div class="citation" itemprop="citation" itemscope="itemscope" itemtype="http://schema.org/ScholarlyArticle" id="ref-50"><span class="citation-authors-year"><b><span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Wu</span> <span class="given-names" itemprop="givenName">SH</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Sun</span> <span class="given-names" itemprop="givenName">HT</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Teng</span> <span class="given-names" itemprop="givenName">YC</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Rejmánek</span> <span class="given-names" itemprop="givenName">M</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Chaw</span> <span class="given-names" itemprop="givenName">SM</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Yang</span> <span class="given-names" itemprop="givenName">TYA</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Hsieh</span> <span class="given-names" itemprop="givenName">CF</span></span>.</b> <b class="year" itemprop="datePublished">2010</b>.</span> <cite itemprop="name"><a class="article-title" target="_blank" itemprop="url" href="https://scholar.google.com/scholar_lookup?title=Patterns of plant invasions in China: Taxonomic, biogeographic, climatic approaches and anthropogenic effects&amp;author=Wu&amp;publication_year=2010">Patterns of plant invasions in China: Taxonomic, biogeographic, climatic approaches and anthropogenic effects</a>.</cite> <span><span class="issue" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationIssue"><span class="volume" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationVolume"><span class="source" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/Periodical"><span itemprop="name">Biological Invasions</span></span> <b itemprop="volumeNumber">12</b></span>(<span itemprop="issueNumber">7</span>)</span>:<span class="fpage" itemprop="pageStart">2179</span>-<span class="lpage" itemprop="pageEnd">2206</span> </span></div></li><li class="ref"><div class="citation" itemprop="citation" itemscope="itemscope" itemtype="http://schema.org/Book" id="ref-51"><span class="citation-authors-year"> <b class="year" itemprop="datePublished">2014</b>.</span> <cite class="article-title"/> <span itemprop="name"><a class="source" target="_blank" href="https://scholar.google.com/scholar_lookup?title=2013 Yearbook of Xinjiang Entry-exit Inspection and Quarantine Bureau&amp;author=&amp;publication_year=2014">2013 Yearbook of Xinjiang Entry-exit Inspection and Quarantine Bureau</a>.</span><span>  Urumqi: <span class="publisher">Xinjiang People’s Publishing House</span>.   <span class="comment">(in Chinese)</span></span></div></li><li class="ref"><div class="citation" itemprop="citation" itemscope="itemscope" itemtype="http://schema.org/ScholarlyArticle" id="ref-52"><span class="citation-authors-year"><b><span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Xu</span> <span class="given-names" itemprop="givenName">H</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Qiang</span> <span class="given-names" itemprop="givenName">S</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Genovesi</span> <span class="given-names" itemprop="givenName">P</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Ding</span> <span class="given-names" itemprop="givenName">H</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Wu</span> <span class="given-names" itemprop="givenName">J</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Meng</span> <span class="given-names" itemprop="givenName">L</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Han</span> <span class="given-names" itemprop="givenName">Z</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Miao</span> <span class="given-names" itemprop="givenName">J</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Hu</span> <span class="given-names" itemprop="givenName">B</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Guo</span> <span class="given-names" itemprop="givenName">J</span></span>.</b> <b class="year" itemprop="datePublished">2012</b>.</span> <cite itemprop="name"><a class="article-title" target="_blank" itemprop="url" href="https://doi.org/10.3897%2Fneobiota.15.3575">An inventory of invasive alien species in China</a>.</cite> <span><span class="volume" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationVolume"><span class="source" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/Periodical"><span itemprop="name">NeoBiota</span></span> <b itemprop="volumeNumber">15</b></span>:<span class="fpage" itemprop="pageStart">1</span>-<span class="lpage" itemprop="pageEnd">26</span> </span></div></li><li class="ref"><div class="citation" itemprop="citation" itemscope="itemscope" itemtype="http://schema.org/ScholarlyArticle" id="ref-53"><span class="citation-authors-year"><b><span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Xue</span> <span class="given-names" itemprop="givenName">G</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Fan</span> <span class="given-names" itemprop="givenName">W</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Zhang</span> <span class="given-names" itemprop="givenName">X</span></span>.</b> <b class="year" itemprop="datePublished">2004</b>.</span> <cite itemprop="name"><a class="article-title" target="_blank" itemprop="url" href="https://scholar.google.com/scholar_lookup?title=Analysis on the intercepted situation of the entry plant pests and the quarantine and supervisory measures in Xinjiang&amp;author=Xue&amp;publication_year=2004">Analysis on the intercepted situation of the entry plant pests and the quarantine and supervisory measures in Xinjiang</a>.</cite> <span><span class="issue" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationIssue"><span class="volume" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationVolume"><span class="source" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/Periodical"><span itemprop="name">Xinjiang Agricultural Sciences</span></span> <b itemprop="volumeNumber">41</b></span>(<span itemprop="issueNumber">5</span>)</span>:<span class="fpage" itemprop="pageStart">263</span>-<span class="lpage" itemprop="pageEnd">267</span>  <span class="comment">(in Chinese)</span></span></div></li><li class="ref"><div class="citation" itemprop="citation" itemscope="itemscope" itemtype="http://schema.org/Book" id="ref-54"><span class="citation-authors-year"><b><span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Yuan</span> <span class="given-names" itemprop="givenName">G</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Li</span> <span class="given-names" itemprop="givenName">X</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Lv</span> <span class="given-names" itemprop="givenName">G</span></span>.</b> <b class="year" itemprop="datePublished">2012</b>.</span> <cite class="article-title"/> <span itemprop="name"><a class="source" target="_blank" href="https://scholar.google.com/scholar_lookup?title=Biodiversity Distribution and Assessment of Xinjiang Uygur Autonomous Region&amp;author=&amp;publication_year=2012">Biodiversity Distribution and Assessment of Xinjiang Uygur Autonomous Region</a>.</span><span>  Urumqi: <span class="publisher">Xinjiang Science and Technology Press</span>.   <span class="comment">(in Chinese)</span></span></div></li><li class="ref"><div class="citation" itemprop="citation" itemscope="itemscope" itemtype="http://schema.org/ScholarlyArticle" id="ref-55"><span class="citation-authors-year"><b><span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Zhang</span> <span class="given-names" itemprop="givenName">D</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Tao</span> <span class="given-names" itemprop="givenName">J</span></span>, <span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Mahmut</span></span>.</b> <b class="year" itemprop="datePublished">1997</b>.</span> <cite itemprop="name"><a class="article-title" target="_blank" itemprop="url" href="https://scholar.google.com/scholar_lookup?title=Spreading again along with the railway of Rattus norvegicus and its regulatiag methods in Xinjiang&amp;author=Zhang&amp;publication_year=1997">Spreading again along with the railway of <i>Rattus norvegicus</i> and its regulatiag methods in Xinjiang</a>.</cite> <span><span class="volume" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/PublicationVolume"><span class="source" itemprop="isPartOf" itemscope="itemscope" itemtype="http://schema.org/Periodical"><span itemprop="name">Endemic Diseases Bulletin</span></span> <b itemprop="volumeNumber">12</b></span>:<span class="fpage" itemprop="pageStart">106</span>-<span class="lpage" itemprop="pageEnd">108</span>  <span class="comment">(in Chinese)</span></span></div></li><li class="ref"><div class="citation" itemprop="citation" itemscope="itemscope" itemtype="http://schema.org/Book" id="ref-56"><span class="citation-authors-year"><b><span class="name" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><span class="surname" itemprop="familyName">Zhang</span> <span class="given-names" itemprop="givenName">R</span></span>.</b> <b class="year" itemprop="datePublished">1999</b>.</span> <cite class="article-title"/> <span itemprop="name"><a class="source" target="_blank" href="https://scholar.google.com/scholar_lookup?title=Zoogeography of China&amp;author=&amp;publication_year=1999">Zoogeography of China</a>.</span><span>  Beijing: <span class="publisher">Science Press</span>.   <span class="comment">(in Chinese)</span></span></div></li></ul></section>
  </footer>
    </article>
  </body>
</html>
  recorded_at: 2020-03-20 22:46:55 GMT
  recorded_with: vcr/0.5.0.92, webmockr/0.6.0.92
